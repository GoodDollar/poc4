{"version":3,"sources":["logo.png","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","config","navigator","publicUrl","URL","process","window","location","href","origin","addEventListener","swUrl","concat","isLocalhost","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","_react","_interopRequireDefault","_reactDom","_App","_interopRequireWildcard","ReactDOM","render","default","createElement","document","getElementById","_reactNativeWeb","_logo","App","spinValue","Animated","Value","onClick","wasRotated","_this","_value","timing","toValue","duration","easing","Easing","linear","start","spin","this","interpolate","inputRange","outputRange","View","style","styles","container","Image","source","logo","transform","rotate","Text","title","Platform","OS","TouchableHighlight","onPress","button","underlayColor","buttonText","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","fontWeight","fontSize","borderRadius","padding","marginVertical","marginTop","color","hotWrapper","require","hot"],"mappings":"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","file":"static/js/main.ec8accd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7940e6ce.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Platform,\n  TouchableHighlight,\n  Animated,\n  Easing,\n} from 'react-native';\nimport logo from './logo.png';\n\nclass App extends Component {\n  state = {\n    spinValue: new Animated.Value(0),\n  }\n\n  onClick = () => {\n    const wasRotated = this.state.spinValue._value === 1;\n    Animated.timing(\n      this.state.spinValue,\n      {\n        toValue: wasRotated ? 0 : 1,\n        duration: 250,\n        easing: Easing.linear\n      }\n    ).start()\n  }\n\n  render() {\n    const spin = this.state.spinValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: ['0deg', '360deg']\n    });\n\n    return (\n      <View style={styles.container}>\n        <Animated.Image source={logo} style={[styles.logo, { transform: [{rotate: spin}] }]}/>\n        <Text style={styles.title}>Create React Native Web App</Text>\n        <Text>Open up src/App.js to start working on your app!</Text>\n        <Text>Changes you make will automatically reload.</Text>\n        {Platform.OS !== 'web' && <Text>Shake your phone to open the developer menu.</Text>}\n        <TouchableHighlight\n          onPress={this.onClick}\n          style={styles.button}\n          underlayColor={'#0A84D0'}\n        >\n          <Text style={styles.buttonText}>Rotate Logo</Text>\n        </TouchableHighlight>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 300,\n    height: 300,\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nlet hotWrapper = () => () => App;\nif (Platform.OS === 'web') {\n  const { hot } = require('react-hot-loader');\n  hotWrapper = hot;\n}\nexport default hotWrapper(module)(App);\n"],"sourceRoot":""}