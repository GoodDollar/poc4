{"version":3,"sources":["shared/IDDao.js","shared/Utils.js","index.js","App.js","shared/Blockstack.js","shared/Shared.js","containers/Main/index.js","shared/Daostack.js","containers/PageContainer/index.js","components/Welcome/index.js","store/configureStore.js","allReducers.js","components/Welcome/reducers/reducer.js","components/Welcome/actions/index.js","components/Welcome/services/index.js","components/Welcome/services/service.js","serviceWorker.js"],"names":["_bs","_interopRequireDefault","__webpack_require__","_Utils","_ipfsMini","_Shared2","_ethereumjsUtil","_DAOToken","_Identity","_GenesisProtocol","IDDao","pkey","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","_defineProperty2","_assertThisInitialized2","_get2","prototype","console","log","web3","Utils","getWeb3","walletOwnerPubKey","ethUtils","privateToPublic","toBuffer","toString","walletOwnerAddress","privateToAddress","walletOwnerAccount","eth","accounts","privateKeyToAccount","address","ipfs","IPFS","host","port","protocol","wallet","add","walletOwner","defaultAccount","netword_id","network_id","IdentityContract","networks","GenesisContract","GENContract","gasPrice","gasLimit","identityContract","Contract","abi","gas","genesisContract","from","listenProposals2","bind","addEventToAllProposals","handleProposals","profileProcessed","identityStatus","getIdentityStatus","then","x","proposals","proposalPromise","undefined","allProposalsLoaded","amountOfProposals","amountOfProcessedProposals","toAddr","rawTransaction","to","value","utils","toHex","toWei","chainId","parseInt","signTransaction","signedTx","_this2","sendSignedTransaction","catch","err","error","methods","transfer","send","ipfsListing","bs58","decode","slice","bytes32Hex","hashHex","hashBytes","Buffer","encode","ipfsData","feeAmount","JSON","stringify","ipfsPromise","Promise","resolve","reject","_this3","addJSON","result","hash","getBytes32FromIpfsHash","ipfsByte32","amount","getBalance","balance","proposeProfile","txHash","proposalId","genAmount","approve","txApprovePromise","stake","txPromise","ipfsHash","getIpfsHashFromBytes32","_this4","catJSON","e","getPastEvents","fromBlock","toBlock","events","_this5","length","all","map","profiles","returnValues","_address","p","profile","state","proposalStatusPromise","proposalInfoPromise","profileDataPromise","getProposalProfileIPFS","identityHash","values","proposalStatus","proposalInfo","data","subscribed","ProfileProposal","event","on","_ref","_asyncToGenerator2","_regenerator","mark","_callee5","wrap","_context5","prev","next","_this7","stop","_x7","apply","arguments","addr","Shared","_web","_Secrets","a","url","document","createElement","href","init","Web3","givenProvider","web3Provider","parseVersionString","version","api","major","currentProvider","isMetaMask","provider","Secrets","ethereum","infura","api_key","providers","WebsocketProvider","str","split","minor","patch","_react","_reactDom","_App","serviceWorker","_interopRequireWildcard","ReactDOM","render","getElementById","unregister","_reactRedux","_index","_configureStore","_reactNativeWeb","_reactRouterDom","store","_callee","_context","App","Provider","View","style","styles","container","BrowserRouter","Main","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","logo","width","height","title","fontWeight","fontSize","button","borderRadius","padding","marginVertical","marginTop","buttonText","color","hotWrapper","Platform","OS","require","hot","module","_lodash","_blockstack","LOGGED_STATE","NOT_LOGGED_IN","PENDING_LOGIN","LOGGED_IN","Events","CREATE_ACCOUNT_FAILED","Attestations","ACCOUNT_CREATED","instance","Blockstack","userData","getUserEthAddr","loadLoggedInUser","getUserPrivateKey","localStorageRAM","global","window","location","origin","search","localStorage","getItem","itemName","res","setItem","itemValue","removeItem","ud","initFakeWindow","Object","defineProperties","blockstack","loadUserData","concat","authResponseToken","username","isLoggedIn","getFile","app","absoluteUrl","decrypt","file","parse","appPrivateKey","privateKey","getProfile","_","get","fetch","walletLoadedOnServer","putFile","encrypt","loginObject","isSignInPending","loggedState","loginPromise","handlePendingSignIn","isUserSignedIn","signUserOut","fee","Identity","account","identity","dataHash","sha3","profilePath","iddao","path","register","_context4","t0","lookupProfile","proposalsPromise","proposalPromises","toPairs","_ref2","_callee6","_ref3","proposal","_context6","_slicedToArray2","json","sent","abrupt","_x5","props","checkProposalsLoaded","proposalsLoaded","setState","clearTimeout","task","setInterval","PageContainer","React","connectedMain","connect","withRouter","_IDDao","Daostack","_x","_Welcome","Route","exact","component","Welcome","connectedPageContainer","dispatch","onPressVouch","alert","onPressVote","onPressRegister","registered","src","className","alt","variant","Button","onPress","initialState","_redux","createStore","allReducers","applyMiddleware","thunk","devToolsExtension","getState","_reduxThunk","_allReducers","_reducer","combineReducers","welcome","action","type","DATA_SUCCESS","_objectSpread2","user","DATA_FAILURE","_actions","service","getData","success","failure","_services","DATA_REQUEST","_service","keys","forEach","key","defineProperty","exports","enumerable","method","headers","Content-Type","response","ok","statusText","jsonResponse","payload","config","navigator","publicUrl","URL","process","addEventListener","swUrl","isLocalhost","contentType","status","indexOf","ready","registration","reload","registerValidSW","checkValidServiceWorker","Boolean","hostname","match","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.752a2f9b.chunk.js","sourcesContent":["/* @flow */\n\n// $FlowFixMe\nimport Web3 from 'web3'\nimport bs58 from 'bs58'\n// $FlowFixMe\nimport Utils from './Utils'\nimport IPFS from 'ipfs-mini'\nimport Shared from './Shared'\n// $FlowFixMe\nimport ethUtils from 'ethereumjs-util'\n\n// $FlowFixMe\nimport Web3PromieEvent from 'web3-core-promievent'\nimport GENContract from './blockchain/build/contracts/DAOToken.json'\nimport IdentityContract from './blockchain/build/contracts/Identity.json'\nimport GenesisContract from './blockchain/build/contracts/GenesisProtocol.json'\n\nconst CONTRACTS_DISABLED = false\nexport default class IDDao extends Shared {\n\n  web3: Web3;\n  pkey: string\n  addr: string\n  gasPrice: number\n  netword_id: number\n  walletOwnerPubKey: Buffer\n  walletOwnerAddress:Buffer\n  walletOwnerAccount:{}\n\n  constructor(pkey: string) {\n    super()\n\n    if (super.isClient()) {\n      console.log(\"%c Client mode\", 'background: #222; color: #bada55')\n    }else{\n      console.log(\"%c Server mode\", 'background: blue; color: white')\n    }\n\n    // $FlowFixMe\n    console.log('creating IDao instance for pkey:',pkey)\n    this.pkey = pkey\n    this.web3 = Utils.getWeb3()\n    console.log('generating public key from private key ',this.pkey)\n    this.walletOwnerPubKey = ethUtils.privateToPublic(ethUtils.toBuffer('0x' + this.pkey)).toString('hex')\n    this.walletOwnerAddress = '0x'+ethUtils.privateToAddress(ethUtils.toBuffer('0x' + this.pkey)).toString('hex')\n    this.walletOwnerAccount = this.web3.eth.accounts.privateKeyToAccount(pkey)\n    console.log('generated public key ',this.walletOwnerPubKey)\n    console.log('generated address ',this.walletOwnerAddress)\n    console.log('generated account ',this.walletOwnerAccount.address)\n    \n    this.ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n    //this.web3 = new Web3(new WebsocketProvider(Meteor.settings.public.web3provider)) // can be - \"wss://ropsten.infura.io/ws\" or \"ws://localhost:8545\" or any other.\n    \n\n    //this.web3.eth.accounts.wallet.add(this.walletOwnerAccount)\n    this.web3.eth.accounts.wallet.add(this.pkey) // using pKey because using external provider, (Infura in your case), when you specify web3.eth.defaultAccount you must add its private key in web3.eth.accounts.wallet (also referred to as a keystore), https://ethereum.stackexchange.com/questions/26999/invalid-json-rpc-response-error-for-sendtransaction-on-infura-ropsten-node-t\n    console.log('adding pkey,walletOwner', { pkey, \"walletOwner\":this.walletOwnerPubKey })\n    console.log('wallet entry for',  this.walletOwnerAccount.address,\"' is \",this.web3.eth.accounts.wallet[this.walletOwnerAccount.address])\n    \n    this.web3.eth.defaultAccount = this.walletOwnerAddress\n    console.log('setting defaultAccount to:',this.walletOwnerAddress)\n    //this.netword_id = Meteor.settings.public.network_id\n    //TODO: Read from config!\n    this.netword_id = 42\n    console.log({ \"network_id\": this.netword_id })\n\n    console.log(\"Identity contract address:\",IdentityContract.networks[this.netword_id].address)\n    console.log(\"Genesis contract address:\",GenesisContract.networks[this.netword_id].address)\n    console.log(\"GENContract contract address:\",GENContract.networks[this.netword_id].address)\n\n    this.gasPrice = 2400000000\n    this.gasLimit = 2000000\n\n    this.identityContract = new this.web3.eth.Contract(IdentityContract.abi, IdentityContract.networks[this.netword_id].address, {  gas: this.gasLimit })\n    this.genesisContract = new this.web3.eth.Contract(GenesisContract.abi, GenesisContract.networks[this.netword_id].address, { from: this.walletOwnerAddress, gas: this.gasLimit })\n    this.GENContract = new this.web3.eth.Contract(GENContract.abi, GENContract.networks[this.netword_id].address, { from: this.walletOwnerAddress, gas: 4500000 })\n    \n    //this.web3.eth.getGasPrice().then(x=> this.gasPrice = x)\n    \n\n    this.listenProposals2 = this.listenProposals2.bind(this)\n    this.addEventToAllProposals = this.addEventToAllProposals.bind(this)\n    this.handleProposals = this.handleProposals.bind(this)\n    this.profileProcessed = this.profileProcessed.bind(this)\n\n\n    if (super.isClient) {\n      this.identityStatus = this.getIdentityStatus(this.walletOwnerAddress).then(x=>{this.identityStatus=x; console.log(\"this.identityStatus\", this.identityStatus)})\n      this.proposals = {}\n      this.proposalPromise = undefined\n      this.allProposalsLoaded = false\n      this.amountOfProposals = 0\n      this.amountOfProcessedProposals = 0\n    }\n  }\n\n\n  /*\n      Create new user wallet and top it with some eth and gen\n   */\n  async createAndTopWallet(toAddr) {\n    // let gas = await this.web3.eth.estimateGas({to:toAddr, from:this.walletOwner, value:this.web3.utils.toWei(\"0.1\", \"ether\")})\n    let gas = 300000\n    let gasPrice = (await this.gasPrice)\n\n    // Top wallet with 0.1 ethers from this contract (GoodDollar) -> starting amount of the new wallet.\n    console.log(\"sending 0.1 ether to create wallet in address \", toAddr, ' from ',this.walletOwnerAddress)\n    let rawTransaction = {\n          \"from\": this.walletOwnerAddress,\n          \"to\": toAddr,\n          \"value\": this.web3.utils.toHex(this.web3.utils.toWei(\"0.1\", \"ether\")),\n          gas,\n          \"chainId\": parseInt(this.netword_id)\n        };\n\n    console.log(\"signing transaction\")\n     await  this.walletOwnerAccount.signTransaction(rawTransaction).then(signedTx =>{\n        console.log(\"tx signed, tx:\",signedTx)\n        this.web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n        }).catch(err => {console.error(\"sendTransaction\", err)})\n      \n    \n    //let txHash = await this.web3.eth.sendTransaction({ to: toAddr, value: this.web3.utils.toWei(\"0.1\", \"ether\") }).catch(err => {console.error(\"sendTransaction\", err)})\n    // gas = await this.GENContract.methods.transfer(addr,this.web3.utils.toWei(\"100\", \"ether\")).estimateGas()\n\n    // Sending 100 ether to Genesis contract from this wallet.\n    console.log(\"Sending 100 MEWE's to account \", toAddr)\n    let genTxHash = await this.GENContract.methods.transfer(toAddr, this.web3.utils.toWei(\"100\", \"ether\")).send().catch(err => {\n      console.error(\"genTransfer\", err)\n      throw (err)\n    })\n\n    console.log(\"loaded wallet\", toAddr)\n    return true;\n  }\n  // Return bytes32 hex string from base58 encoded ipfs hash,\n  // stripping leading 2 bytes from 34 byte IPFS hash\n  // Assume IPFS defaults: function:0x12=sha2, size:0x20=256 bits\n  // E.g. \"QmNSUYVKDSvPUnRLKmuxk9diJ6yS96r1TrAXzjTiBcCLAL\" -->\n  // \"0x017dfd85d4f6cb4dcd715a88101f7b1f06cd1e009b2327a0809d01eb9c91f231\"\n\n  getBytes32FromIpfsHash(ipfsListing) {\n    return \"0x\" + bs58.decode(ipfsListing).slice(2).toString('hex')\n  }\n\n  // Return base58 encoded ipfs hash from bytes32 hex string,\n  // E.g. \"0x017dfd85d4f6cb4dcd715a88101f7b1f06cd1e009b2327a0809d01eb9c91f231\"\n  // --> \"QmNSUYVKDSvPUnRLKmuxk9diJ6yS96r1TrAXzjTiBcCLAL\"\n\n  getIpfsHashFromBytes32(bytes32Hex) {\n    // Add our default ipfs values for first 2 bytes:\n    // function:0x12=sha2, size:0x20=256 bits\n    // and cut off leading \"0x\"\n    const hashHex = \"1220\" + bytes32Hex.slice(2)\n    const hashBytes = Buffer.from(hashHex, 'hex');\n    const hashStr = bs58.encode(hashBytes)\n    return hashStr\n  }\n\n  /*\n    write profile to identity dao and pay fee\n  */\n  async register(ipfsData, feeAmount): Promise<[typeof Web3PromieEvent]> {\n    let dataBuffer = Buffer.from(JSON.stringify(ipfsData))\n\n    // 1. Hash the user data\n    let ipfsPromise = new Promise((resolve, reject) => {\n      this.ipfs.addJSON(ipfsData, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    }\n    )\n\n    // 2. Convert the hashed ips data to Byte32\n    let ipfsByte32 = await ipfsPromise.then(hash => this.getBytes32FromIpfsHash(hash))\n    console.log({ ipfsByte32 })\n\n    let amount = this.web3.utils.toWei(feeAmount.toString(), \"ether\");\n    let gas = 400000//await this.identityContract.methods.proposeProfile(ipfsByte32).estimateGas({from:this.walletOwner})\n    let gasPrice = (await this.gasPrice) * 1.5\n    console.log({ gas, gasPrice, amount })\n\n    /* 3. Send TX: identity.propse for this ipfsProfile. This will:\n          a. Raise (log) event on the blockchain with this IPFS profile which is now considered a proposal (helpful in the future to load all proposals)\n          b. Insert proposal to Daostack mechanism in order to support Daostack feature.\n    */\n    let balance = await this.web3.eth.getBalance(this.web3.eth.defaultAccount)\n    console.log(\"balance for account.\",this.walletOwnerAddress,balance)\n    console.log({amount})\n    if (balance > 0) {\n      let txHash = await this.identityContract.methods.proposeProfile(ipfsByte32).send({\n        from:this.web3.eth.defaultAccount,\n        gasPrice,\n        gas,\n        value: amount\n      }\n      ).catch(err => {\n          console.error(err)\n          return;\n      }\n      )\n      console.log(\"Registered profile to DAO\", txHash)\n      return txHash\n    }\n\n  }\n\n  async vouch(proposalId, genAmount) {\n    console.log(\"gencontract vouch call\", proposalId, genAmount)\n    // let gas = await this.GENContract.methods.approve(GenesisContract.address,genAmount).estimateGas()\n    // let gasPrice = await this.gasPrice\n    // console.log({gas,gasPrice,genAmount})\n    let txApprovePromise: Web3PromieEvent = await this.GENContract.methods.approve(GenesisContract.address, genAmount).send()\n    console.log(\"gencontract vouch after approved\", txApprovePromise)\n    //gas = await this.genesisContract.methods.stake(proposalId,1,genAmount).estimateGas()\n    //gasPrice = (await this.gasPrice)*1.5\n    let txPromise: Web3PromieEvent = await this.genesisContract.methods.stake(proposalId, 1, genAmount).send()\n    console.log(\"vouch, after stake\", { txPromise })\n    return txPromise\n  }\n\n  async getProposalProfileIPFS(ipfsByte32) {\n\n    let ipfsHash = this.getIpfsHashFromBytes32(ipfsByte32)\n    console.log(\"getting ipfs file for:\", ipfsByte32, ipfsHash)\n    return new Promise((reject, resolve) => {\n      this.ipfs.catJSON(ipfsHash, (err, result) => {\n        console.log(\"got ipfs response for:\", ipfsByte32, ipfsHash, err, result)\n        if (err) {\n          console.log(\"error ipfs\", err)\n          reject(err)\n        }\n        else {\n\n          resolve(result)\n        }\n      });\n    }).catch(e => e)\n  }\n\n  profileProcessed() {\n\n    this.amountOfProcessedProposals++\n    console.log(this.amountOfProcessedProposals)\n    if (this.amountOfProcessedProposals = this.amountOfProposals) {\n      this.allProposalsLoaded = true\n      console.log(\"all proposals loaded\", this.proposals)\n    }\n  }\n\n  listenProposals2() {\n\n    return this.identityContract.getPastEvents('ProfileProposal', {\n      //fromBlock: Meteor.settings.public.proposalFirstBlock, //TODO: Read from config!\n      fromBlock:0,\n      toBlock: 'latest'\n    }, this.handleProposals)\n\n  }\n\n\n  handleProposals(error, events) {\n\n    this.amountOfProposals = events.length\n    this.amountOfProcessedProposals = 0\n\n    if (this.amountOfProposals == this.amountOfProcessedProposals) { // no need to load proposals.\n      this.allProposalsLoaded = true\n      return;\n    }\n\n    if (error)\n      console.error(error)\n    else {\n      console.log(\"profile proposals\", events) // same results as the optional callback above\n      //events.forEach(e => this.addEventToAllProposals(e))\n\n\n      // 1. Will wait till *all* events are mapped to their profile - and get an array of profiles\n      // 2. Wait for all profiles to complete this action: For each profile, wait again to get extended profile information, and save if on the \"this.proposals\" object\n      // 3. When all completed, return this.proposals when it's fully fulled.\n      Promise.all(events.map(e => this.identityContract.methods.profiles(e.returnValues._address).call()\n        .then(p => {\n          this.addEventToAllProposals(p, e.returnValues._address)\n        })))\n\n    }\n  }\n\n  addEventToAllProposals(profile, _address) {\n\n    console.log(\"Adding Profile if has state On Vote\", { profile }, this)\n\n    // Checking profile state - only profiles of state 3 and up on GENESIS will be processed\n    if (profile.state === \"1\") // TODO: change \"1\" to static const members\n    {\n\n      let proposalStatusPromise = this.genesisContract.methods.state(profile.proposalId).call()\n      let proposalStatusPromiseHandler = (s => {\n        let proposalStatus = parseInt(s)\n        if (proposalStatus <= 2) {\n          this.profileProcessed() // No other processing was done\n          console.log(\"Closed proposal fitltered\", { profile, proposalStatus })\n          return\n        }\n      })\n\n      let proposalInfoPromise = this.genesisContract.methods.proposals(profile.proposalId).call()\n      let profileDataPromise = this.getProposalProfileIPFS(profile.identityHash)\n\n      Promise.all([proposalStatusPromise, proposalInfoPromise, profileDataPromise]).then(\n        (function (values) {\n          profile.proposalStatus = values[0]\n          profile.proposalInfo = values[1]\n          profile.data = values[2]\n          this.proposals[_address] = profile // Now IDao on the client contains the full profile information - and the client can use it\n          let proposalStatus = profile.proposalStatus\n          console.log(\"Inserted Profile + Proposal\", { profile, proposalStatus })\n          this.profileProcessed()\n        }).bind(this)\n      )\n\n    } else {\n      this.profileProcessed() // No other processing was done\n    }\n  }\n\n  async listenProposals() {\n    if (CONTRACTS_DISABLED)\n      return\n    //let startBlock = Meteor.settings.public.proposalFirstBlock\n    let startBlock = 0 //TODO: Read from config!\n    let subscribed = this.identityContract.events.ProfileProposal({\n      fromBlock: 9323973,\n      toBlock: 'latest'\n    }, (error, event) => { console.log(\"ProfileProposal event:\", event); })\n      .on('data', async (event) => {\n        console.log(\"ProfileProposal event:\", event); // same results as the optional callback above\n        this.addEventToAllProposals(event)\n      })\n    console.log(\"registered to proposalevent\", subscribed)\n    // this.identityContract.events.ProfileApproved({\n    //   fromBlock: startBlock\n    // }, (error, event) => { console.log(event); })\n    // .on('data', async (event) => {\n    //   console.log(event); // same results as the optional callback above\n    //   let {_address} = event.returnValues\n    //   delete this.profiles[_address]\n    //\n    // })\n    // this.identityContract.events.ProfileDeclined({\n    //   fromBlock: startBlock\n    // }, (error, event) => { console.log(event); })\n    // .on('data', async (event) => {\n    //   console.log(event); // same results as the optional callback above\n    //   let {_address} = event.returnValues\n    //   delete this.profiles[_address]\n    //\n    // })\n\n\n  }\n\n  async getIdentityStatus(addr) {\n    if (CONTRACTS_DISABLED)\n      return 'none'\n    let profile = await this.identityContract.methods.profiles(addr).call()\n    if (profile.state === 3)\n      return 'approved'\n    let proposalStatus = await this.genesisContract.methods.state(profile.proposalId).call()\n    if (proposalStatus === 3)\n      return 'pending vouch'\n    if (proposalStatus === 4)\n      return 'pending vote'\n    return 'none'\n  }\n\n\n\n}\n","//@flow\nimport Web3 from 'web3' // import web3 v1.0 constructor\nimport Secrets from './../Secrets.json'\n\nexport class Utils {\n    web3:Object\n    version: {\n        major: string,\n        minor: string,\n        patch: string\n    }\n\n  constructor() {\n      this.init()\n  }\n\n  init(){\n      //this.web3 = window.web3; // depracated\n      this.web3 = new Web3(Web3.givenProvider || \"ws://localhost:8546\");\n        console.log(\"Web3.givenProvider\",Web3.givenProvider);\n        if (!Web3.givenProvider)\n            console.log(\"ws://localhost:8546\")\n  }\n\n  getWeb3(){\n    \n    let web3Provider = undefined\n    //let useWebSocket = Meteor.settings.public.useWebSocket //TODO: change to config\n    let useWebSocket = true\n    if ((typeof this.web3 !== 'undefined') && (this.parseVersionString(this.web3.version.api).major > 0 )){  // web3 version 1.0 and up\n      web3Provider = this.web3.currentProvider;\n      console.log(\"existing web3. is is metamask?\",this.web3.currentProvider.isMetaMask);\n  } else {\n\n    //TODO: change to config\n    //let network_id = Meteor.settings.public.network_id\n    let network_id = 42\n    let provider\n    if (useWebSocket){\n        // provider = Meteor.settings.public.websocketWeb3Provider + Secrets.ethereum[network_id].infura.api_key\n        //TODO: change to config\n        provider = \"wss://kovan.infura.io/ws\" + Secrets.ethereum[network_id].infura.api_key\n        web3Provider = new Web3.providers.WebsocketProvider(provider);\n    }else{\n        //TODO: change to config\n        provider = \"https://kovan.infura.io/v3/\" + Secrets.ethereum[network_id].infura.api_key\n        web3Provider = new Web3.providers.HttpProvider(provider);\n    }\n    console.log(\"new web3 from provider:\"+provider);\n   }\n\n  // use globally injected web3 to find the currentProvider and wrap with web3 v1.0\n   this.web3 = new Web3(web3Provider);\n\n    //console.log(\"web3 provider:\",this.web3.currentProvider.constructor.name)\n    console.log(\"web3 version:\",this.web3.version.api || this.web3.version)\n\n    return this.web3\n  }\n\n  parseVersionString(str:string):version {\n    if (typeof(str) != 'string') { return undefined }\n    var x = str.split('.');\n    // parse from string or default to 0 if can't parse\n    var maj = parseInt(x[0]) || 0;\n    var min = parseInt(x[1]) || 0;\n    var pat = parseInt(x[2]) || 0;\n    return {\n        major: maj,\n        minor: min,\n        patch: pat\n    }\n}\n\nabsoluteUrl = (function() {\n\tvar a;\n\n\treturn function(url) {\n\t\tif(!a) a = document.createElement('a');\n\t\ta.href = url;\n\n\t\treturn a.href;\n\t};\n})();\n\n}\n\n\n\n\nexport default new Utils() // Singleton\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// @flow\nimport { Provider } from 'react-redux'\nimport React, { Component } from 'react'\nimport Blockstack from './shared/Blockstack'\nimport { Main } from './containers/Main/index'\nimport configureStore from './store/configureStore'\nimport { StyleSheet, View, Platform} from 'react-native'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nconst store = configureStore()\n// let blockstack = new Blockstack();\n\nlet init = async ()=> {\n// 1. Try to login to blockstack.\n // let loginObject = await blockstack.getLoginStatusAndAction() \n // console.log({loginObject})\n}\n\ninit();\n\nclass App extends Component {\n  \n  componentDidMount() {\n    \n  } \n\n\n  render() {\n\n\n    return (\n      <Provider store={store}>\n        <View style={styles.container}>\n          <Router>\n              <Main />\n            </Router>\n        </View>\n      </Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 300,\n    height: 300,\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nlet hotWrapper = () => () => App;\nif (Platform.OS === 'web') {\n  const { hot } = require('react-hot-loader');\n  hotWrapper = hot;\n}\nexport default hotWrapper(module)(App);\n","//@flow\n\nimport _ from 'lodash'\nimport Web3 from 'web3'\nimport IDDao from './IDDao'\nimport Utils from './Utils'\nimport blockstack from 'blockstack'\nimport ethUtils from 'ethereumjs-util'\nimport WebsocketProvider from 'web3-providers-ws'\n// $FlowFixMe\nimport Web3PromieEvent from 'web3-core-promievent'\n\nconst CREATE_RANDOM_WALLET = true;\nconst LOGGED_STATE = {\n  NOT_LOGGED_IN: -1,\n  PENDING_LOGIN: 0,\n  LOGGED_IN: 1,\n}\nconst Events = {\n  CREATE_ACCOUNT_FAILED: \"Account Creation Failed\"\n}\nconst Attestations = {\n  ACCOUNT_CREATED: \"Account Created\"\n}\n\nexport type Attestation = $Values<typeof Attestations>;\nexport type Event = $Values<typeof Events>;\nexport type UserData = {\n  appPrivateKey: string,\n  username: string,\n  profile: any,\n  authResponseToken: string,\n  identityAddress: string,\n  decentralizedID: string\n}\n\nexport type Entity = {\n  \"@did\": string,\n  publicKey: string,\n}\nexport type Claim = {\n  issuer: Entity,\n  subject: Entity,\n  sig?: string,\n  claim: any,\n  issuedAt: Date,\n  expiresAt?: Date,\n}\n\nexport type Identity = {\n  name: String,\n  language: String,\n  socials: [String]\n}\nexport type Profile = {\n  address: string,\n  identity: Identity\n}\n\nlet instance = null;\n\nexport class Blockstack {\n\n  userData: UserData\n  profile: Profile\n  iddao: IDDao\n\n  static LOGGED_STATE = LOGGED_STATE\n  static Events = Events\n  static Attestations = Attestations\n\n  constructor() {\n    //$FlowFixMe\n    if (!instance) {\n      instance = this;\n    }\n\n    this.userData           = {}\n    this.getUserEthAddr     = this.getUserEthAddr.bind(this)\n    this.loadLoggedInUser   = this.loadLoggedInUser.bind(this)\n    this.getUserPrivateKey  = this.getUserPrivateKey.bind(this)\n    \n    \n  }\n\n  initFakeWindow() {\n    const localStorageRAM = {};\n\n    global.window = {\n      location: {\n        origin: 'localhost',\n        search: \"\"\n      },\n      localStorage: {\n        getItem: function (itemName) {\n\n          let res = localStorageRAM[itemName] || null;\n          console.log({ itemName, res })\n          return res\n        },\n        setItem: function (itemName, itemValue) {\n          console.log({ itemName, itemValue })\n          localStorageRAM[itemName] = itemValue;\n        },\n        removeItem: function (itemName) {\n          delete localStorageRAM[itemName];\n        }\n      }\n    }\n    global.location = global.window.location\n    global.localStorage = global.window.localStorage\n  }\n  /**\n   * [setUserData for server side, we overwrite the default loadUserData which reads from localStorage]\n   * @param {[UserData]} ud [the user data as returned from blockstack login]\n   */\n  async setUserData(ud: UserData) {\n    this.initFakeWindow()\n    localStorage.setItem('blockstack', JSON.stringify(ud))\n    Object.defineProperties(blockstack, { loadUserData: () => ud })\n    this.userData = ud\n    global.window.location.search = `?authResponse=${ud.authResponseToken}`\n    // await blockstack.getOrSetLocalGaiaHubConnection()\n  }\n\n  async getProfile(username?: string) {\n    if (!this.profile && this.isLoggedIn())\n      this.profile = await blockstack.getFile(\"profile.js\", { username, app: Utils.absoluteUrl(\"/\"), decrypt: false }).then(file => file ? JSON.parse(file) : {}).catch(e => { return {} })\n    return this.profile || {}\n  }\n\n  getUserPrivateKey() {\n    return this.userData.appPrivateKey\n  }\n  getUserEthAddr() {\n    const appPrivateKey = this.getUserPrivateKey()\n    const privateKey = new Buffer(appPrivateKey, 'hex')\n    const address = ethUtils.privateToAddress(privateKey).toString('hex')\n    return address\n  }\n\n  async loadLoggedInUser(){\n    console.log(\"loading logged in user\")\n    this.userData = blockstack.loadUserData()\n\n    let profile = this.getProfile()\n    if (_.get(profile, 'address') == undefined) {\n      profile.address = this.getUserEthAddr()\n      console.log('profile.address', profile.address)\n      \n     let walletLoadedOnServer =  await fetch('/loadWallet', profile.address)\n     console.log(\"walletLoadedOnServer?\",walletLoadedOnServer) // TODO: return server errors if any\n\n      let res = await blockstack.putFile(\"profile.js\", JSON.stringify(profile), { encrypt: false })\n    }\n    \n    console.log(\"called Blockstack.getLoginStatusAndAction\", this.userData, this.getUserEthAddr())\n    return this.userData\n  }\n\n  getLoginStatusAndAction() {\n    let loginObject\n\n    if (blockstack.isSignInPending()) { // Pending signin state\n      loginObject = { \"loggedState\": LOGGED_STATE.PENDING_LOGIN, \"loginPromise\": blockstack.handlePendingSignIn() }\n      return loginObject;\n    }\n\n    if (!blockstack.isUserSignedIn()) { // User not logged in.\n      loginObject = { \"loggedState\": LOGGED_STATE.NOT_LOGGED_IN, \"loginPromise\": Promise.resolve({}) }\n      return loginObject;\n    }\n\n\n    // User is logged in.\n    loginObject = { \"loggedState\": LOGGED_STATE.LOGGED_IN, \"loginPromise\": Promise.resolve({}) }\n    loginObject.loginPromise = loginObject.loginPromise.then(this.loadLoggedInUser) // TODO: Loading logged in user from the server is not part of blockstack responsibility\n\n    return loginObject;\n\n  }\n\n  \n\n  \n\n  logout() {\n    blockstack.signUserOut()\n  }\n  isLoggedIn() {\n    return blockstack.isUserSignedIn()\n  }\n\n\n  async writeIdentityDetails(data: Identity, fee: number) { // TODO: return promise with ipfsData\n    console.log('writeIdentityDetails',Identity,fee)\n    \n    try {\n      let web3 = Utils.getWeb3()\n      let account = web3.eth.accounts.create(); // TODO: Do we need to create another eth account?! Or get it from blockstack, if exists?\n      console.log('account', account)\n      \n\n      let profile = this.getProfile()\n      profile.identity = data\n      profile.address = account.address\n      let dataHash = Web3.utils.sha3(JSON.stringify(data))\n\n\n      let profilePath = await blockstack.putFile(\"profile.js\", JSON.stringify(profile), { encrypt: false })\n      let ipfsData = {\n        address: this.iddao.addr,\n        hash: dataHash,\n        path: profilePath\n      }\n\n      console.log(\"Wrote profile to blockstack\", { profilePath })\n      let res = await this.iddao.register(ipfsData, fee)\n      console.log('wrote identity to dao', { res })\n\n    } catch (e) {\n      console.log(e)\n    } finally {\n\n    }\n\n  }\n\n  async reloadProfile() {\n    let profile = await blockstack.lookupProfile(this.userData.username)\n    this.userData.profile = profile\n    if (window.localStorage)\n      window.localStorage.setItem('blockstack', JSON.stringify(this.userData))\n  }\n\n  getProfile() {\n    return _.get(this.userData, 'profile')\n  }\n\n  async getProposals() {\n    return this.iddao.proposalsPromise.then(proposals => {\n      let proposalsList = _.toPairs(proposals)\n      //read the profile from blockstack\n      let proposalPromises = proposalsList.map(async ([address, proposal]) => {\n        console.log(\"getting blockstack profile\", { address, proposal })\n        let profile = await fetch(proposal.data.path).then(res => res.json())\n        proposal.profile = profile\n        return proposal\n      })\n      return Promise.all(proposalPromises)\n    })\n  }\n}\n\nBlockstack.Events = Events\nBlockstack.Attestations = Attestations\nBlockstack.LOGGED_STATE = LOGGED_STATE\nexport default Blockstack\n","//@flow\r\nclass Shared {\r\n\r\n    isClient():boolean{\r\n        return(typeof window !== 'undefined' && ({}).toString.call(window) === '[object Window]')\r\n    }\r\n\r\n    isNode():boolean{\r\n        return(typeof global !== \"undefined\"  && ({}).toString.call(global) === '[object global]')\r\n    }   \r\n}\r\n\r\nexport default Shared","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Daostack from '../../shared/Daostack'\nimport { withRouter } from 'react-router-dom'\nimport { PageContainer } from '../PageContainer/index'\nimport { containsValidProofStatement } from 'blockstack/lib/profiles';\n//import { ProgressBar, Colors } from 'react-native-paper';\n\nclass Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    console.log('Main loaded')\n    debugger;\n    this.checkProposalsLoaded = this.checkProposalsLoaded.bind(this)\n      this.state = {\n        proposalsLoaded : false  \n      }\n  }   \n\n  checkProposalsLoaded(){\n      this.setState({proposalsLoaded:true},window.clearTimeout(this.task)) // TEMP\n      debugger;\n      /*if (Daostack.iddao){\n        console.log(\"Daostack.isAllProposalsLoaded?\",Daostack.isAllProposalsLoaded())\n        if (Daostack.isAllProposalsLoaded()){\n          console.log(\"setting state.proposalsLoaded=true\")\n          this.setState({proposalsLoaded:true},window.clearTimeout(this.task))\n        }\n      }*/\n  }\n\n  componentDidMount(){\n    this.task = setInterval(()=>this.checkProposalsLoaded(), 5000);\n  }\n\n  componentWillMount(){\n    clearTimeout(this.task)\n  }\n\n  render() {\n    return (\n      <PageContainer />\n       /*this.state.proposalsLoaded && <PageContainer />*/\n      /*\n      (!this.state.proposalsLoaded &&   <ProgressBar progress={0.5} color={Colors.red800} />)\n      ||\n      (this.state.proposalsLoaded && <PageContainer />)\n    */\n    )\n\n  }\n}\n\nMain.propTypes = {\n  isAllProposalsLoaded: PropTypes.bool,\n};\n\nfunction mapStateToProps(state) {\n  return {}\n}\n\nconst connectedMain = connect(mapStateToProps)(withRouter(Main));\nexport { connectedMain as Main };\n","//@flow\nimport _ from 'lodash'\nimport IDDao from './IDDao'\n\nexport class Daostack {\n    iddao:IDDao\n\n constructor(){\n    //init()\n }\n\n  init(addr,pkey){\n    this.iddao = new IDDao(addr,pkey)\n    return this.iddao\n  }\n\n  listenProposals(){\n    this.iddao.listenProposals2()\n  }\n\n  isAllProposalsLoaded(){\n    return this.iddao.allProposalsLoaded;\n  }\n\n  async getProposals() {\n    return this.iddao.proposalsPromise.then(proposals => {\n      let proposalsList = _.toPairs(proposals)\n      //read the profile from blockstack\n      let proposalPromises =  proposalsList.map(async ([address,proposal]) => {\n        console.log(\"getting blockstack profile\",{address,proposal})\n        let profile = await fetch(proposal.data.path).then(res => res.json())\n        proposal.profile = profile\n        return proposal\n      })\n      return Promise.all(proposalPromises)\n    })\n  }\n}\n\nexport default new Daostack() // Singleton\n","import { View } from 'react-native'\nimport { connect } from 'react-redux'\nimport { Route} from 'react-router-dom'\nimport React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Welcome } from '../../components/Welcome'\n\n\nclass PageContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n  \n    componentDidMount(){\n\n    }\n\n    render() {\n        return (\n            <View>\n                <Route exact path=\"/\" component={Welcome} />\n                <Route exact path=\"/register\" component={Welcome} />\n          </View>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        // actions: bindActionCreators(Actions, dispatch)\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\n\nconst connectedPageContainer = connect(mapStateToProps, mapDispatchToProps)(withRouter(PageContainer));\nexport { connectedPageContainer as PageContainer };\n\n\n","//@flow\nimport React from 'react'\nimport { View } from 'react-native'\nimport { Button } from 'react-native'\n\n\ntype Props = {\n    registered: string,     \n    onPressVote: (event: any) => void,\n    onPressRegister: (event: any) => void,\n    onPressVouch:(event: any) => void,\n};\n\n\nconst onPressVouch = (event)=> {\n    alert('vouch')\n}\n\nconst onPressVote = (event)=> {\n    alert('vote')\n}\n\nconst onPressRegister = (event) => {\n   alert('register')\n}\n\nclass Welcome extends React.Component<Props> {\n    static defaultProps = {\n        registered: \"false\"\n      };\n\n    render() {\n        const registered = this.props.registered\n        debugger;\n                console.log(\"hi\")\n\n        return (\n            <View>\n\n                <img src=\"/mewe-logo.png\" className=\"logoImage\" alt=\"\" />\n                <h1 variant=\"h6\"  className=\"heroTitle\">IDENTITY MADE FOR YOU</h1>\n                <img src=\"/hero-image.png\" className=\"heroImage\"  alt=\"\" />\n                <br />\n                <Button onPress={onPressVouch} title=\"Vouch and earn\">Vouch and earn</Button>\n                <br />\n                {(registered === \"true\") &&\n                    <Button onPress={onPressVote} title=\"Vote\">Vote</Button>\n                }\n\n                    {(registered === \"false\") &&\n                    <Button onPress={onPressRegister} title=\"Register\">Register</Button>\n                }\n\n            </View>\n        )\n    }\n}\n\nexport default Welcome;\n","//@flow\nimport thunk from 'redux-thunk'\nimport { createStore } from 'redux'\nimport { applyMiddleware } from 'redux'\nimport allReducers from '../allReducers'\n\nexport default function configureStore(initialState) {\n  const store = createStore(\n    allReducers,\n      applyMiddleware(thunk),\n      initialState,\n      window.devToolsExtension ? window.devToolsExtension() : undefined\n      \n  )\n  console.log(store.getState())\n\n  return store;\n}","\nimport { combineReducers } from 'redux'\n//import stats from './components/Stats/reducers/reducer'\nimport welcome from  './components/Welcome/reducers/reducer'\n/*import voucher from  './components/Voucher/reducers/reducer'\nimport user from './components/shared/User/reducers/reducer'*/\n\nconst allReducers = combineReducers({\n    welcome\n    /*voucher,\n    user,\n    stats   */\n});\n\nexport default allReducers\n","//@flow\nimport {DATA_SUCCESS} from '../actions'\nimport {DATA_FAILURE} from '../actions'\n\nconst initialState = {\n    user:[],\n}\n\nexport default function reducer(state = initialState, action) {\n\n    switch (action.type) {\n        case DATA_SUCCESS:\n            return {\n                ...state, user: action.data\n            }\n\n        case DATA_FAILURE:\n            return {\n                ...state, user: []\n            }\n      \n        default:\n            return state\n    }\n}\n\n\n\n\n\n\n","// @flow\nimport { service } from '../services';\n\nexport const DATA_REQUEST  = 'DATA_REQUEST'\nexport const DATA_SUCCESS = 'DATA_SUCCESS'\nexport const DATA_FAILURE = 'DATA_FAILURE'\n\n\n\nexport function requestData() {\n    return dispatch => {\n        //dispatch(request({ userId }));\n\n        service.getData()\n            .then(\n                data => {\n                    dispatch(success(data));\n                    //  history.push('/');\n                },\n                error => {\n                    dispatch(failure(error));\n                    //dispatch(alertActions.error(error));\n                }\n            );\n    };\n\n    function request() { return { type: DATA_REQUEST } }\n    function success(data) { return { type: DATA_SUCCESS, data } }\n    function failure(error) { return { type: DATA_FAILURE, error } }\n}\n","export * from './service.js';\n","\nexport const service = {\n    getData,\n};\n\nfunction getData() {\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n\n    };\n\n    return fetch('', requestOptions)\n        .then(response => {\n            if (!response.ok) {\n                console.error(\"failed. error = \"+response.statusText);\n                return Promise.reject(response.statusText);\n            }\n\n            let jsonResponse = response.json();\n\n            return jsonResponse;\n        })\n        .then(payload => {\n            console.log(\"Response:\"+payload);\n\n            return payload;\n        });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}