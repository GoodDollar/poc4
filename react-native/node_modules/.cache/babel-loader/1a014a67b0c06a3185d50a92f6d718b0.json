{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar Class = require('../../core/class');\n\nvar Base = require('./base');\n\nvar fontAnchors = {\n  middle: 'center'\n};\nmodule.exports = Class(Base, {\n  base_initialize: Base.prototype.initialize,\n  initialize: function initialize(text, font, alignment, path) {\n    this.base_initialize();\n    this.draw.apply(this, arguments);\n  },\n  draw: function draw(text, font, alignment, path) {\n    var em;\n\n    if (typeof font == 'string') {\n      em = Number(/(\\d+)/.exec(font)[0]);\n    } else if (font) {\n      em = parseFloat(font.fontSize || font['font-size'] || '12');\n      font = (font.fontStyle || font['font-style'] || '') + ' ' + (font.fontVariant || font['font-variant'] || '') + ' ' + (font.fontWeight || font['font-weight'] || '') + ' ' + em + 'px ' + (font.fontFamily || font['font-family'] || 'Arial');\n    } else {\n      font = this._font;\n    }\n\n    var lines = text && text.split(/\\r?\\n/);\n    this._font = font;\n    this._fontSize = em;\n    this._text = lines;\n    this._alignment = fontAnchors[alignment] || alignment || 'left';\n    var context = Base._genericContext;\n    context.font = this._font;\n    context.textAlign = this._alignment;\n    context.textBaseline = 'middle';\n    lines = this._text;\n    var l = lines.length,\n        width = 0;\n\n    for (var i = 0; i < l; i++) {\n      var w = context.measureText(lines[i]).width;\n      if (w > width) width = w;\n    }\n\n    this.width = width;\n    this.height = l ? l * 1.1 * em : 0;\n    return this.invalidate();\n  },\n  // Interaction\n  localHitTest: function localHitTest(x, y) {\n    if (!this._fill) return null;\n\n    if (x > 0 && y > 0 && x < this.width && y < this.height) {\n      return this;\n    }\n\n    return null;\n  },\n  // Rendering\n  renderShapeTo: function renderShapeTo(context) {\n    if (this._invisible || !this._text || !this._fill && !this._stroke) {\n      return null;\n    }\n\n    context.transform(this.xx, this.yx, this.xy, this.yy, this.x, this.y);\n    var fill = this._fill,\n        stroke = this._stroke,\n        text = this._text,\n        dash = this._strokeDash;\n    context.font = this._font;\n    context.textAlign = this._alignment;\n    context.textBaseline = 'middle';\n    var em = this._fontSize,\n        y = em / 2,\n        lineHeight = 1.1 * em,\n        lines = text,\n        l = lines.length;\n\n    if (fill) {\n      context.fillStyle = fill;\n\n      for (var i = 0; i < l; i++) {\n        context.fillText(lines[i], 0, y + i * lineHeight);\n      }\n    }\n\n    if (stroke) {\n      if (dash) {\n        if (context.setLineDash) {\n          context.setLineDash(dash);\n        } else {\n          // TODO: Remove when FF supports setLineDash.\n          context.mozDash = dash;\n        } // TODO: Create fallback to other browsers.\n\n      } else {\n        if (context.setLineDash) {\n          context.setLineDash([]);\n        } else {\n          context.mozDash = null;\n        }\n      }\n\n      context.strokeStyle = stroke;\n      context.lineWidth = this._strokeWidth;\n      context.lineCap = this._strokeCap;\n      context.lineJoin = this._strokeJoin;\n\n      for (i = 0; i < l; i++) {\n        context.strokeText(lines[i], 0, y + i * lineHeight);\n      }\n    }\n  }\n});\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(fontAnchors, \"fontAnchors\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\canvas\\\\text.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}