{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n * @format\n */\n\n\nimport Batchinator from '../Batchinator';\nimport FillRateHelper from '../FillRateHelper';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport RefreshControl from '../../../exports/RefreshControl';\nimport ScrollView from '../../../exports/ScrollView';\nimport StyleSheet from '../../../exports/StyleSheet';\nimport UIManager from '../../../exports/UIManager';\nimport View from '../../../exports/View';\nimport ViewabilityHelper from '../ViewabilityHelper';\nimport { computeWindowedRenderLimits } from '../VirtualizeUtils';\nimport findNodeHandle from '../../../exports/findNodeHandle';\nimport infoLog from '../infoLog';\nimport invariant from 'fbjs/lib/invariant';\nimport warning from 'fbjs/lib/warning';\nvar flattenStyle = StyleSheet.flatten;\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n/* $FlowFixMe - this Props seems to be missing a bunch of stuff. Remove this\n * comment to see the errors */\n\n\nvar _usedIndexForKey = false;\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\n\nvar VirtualizedList = function (_React$PureComponent) {\n  _inherits(VirtualizedList, _React$PureComponent); // scrollToEnd may be janky without getItemLayout prop\n\n\n  VirtualizedList.prototype.scrollToEnd = function scrollToEnd(params) {\n    var animated = params ? params.animated : true;\n    var veryLast = this.props.getItemCount(this.props.data) - 1;\n\n    var frame = this._getFrameMetricsApprox(veryLast);\n\n    var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n\n    this._scrollRef.scrollTo(\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n     * comment suppresses an error when upgrading Flow's support for React.\n     * To see the error delete this comment and run Flow. */\n    this.props.horizontal ? {\n      x: offset,\n      animated: animated\n    } : {\n      y: offset,\n      animated: animated\n    });\n  }; // scrollToIndex may be janky without getItemLayout prop\n\n\n  VirtualizedList.prototype.scrollToIndex = function scrollToIndex(params) {\n    var _props = this.props,\n        data = _props.data,\n        horizontal = _props.horizontal,\n        getItemCount = _props.getItemCount,\n        getItemLayout = _props.getItemLayout,\n        onScrollToIndexFailed = _props.onScrollToIndexFailed;\n    var animated = params.animated,\n        index = params.index,\n        viewOffset = params.viewOffset,\n        viewPosition = params.viewPosition;\n    invariant(index >= 0 && index < getItemCount(data), 'scrollToIndex out of range: ' + index + ' vs ' + (getItemCount(data) - 1));\n\n    if (!getItemLayout && index > this._highestMeasuredFrameIndex) {\n      invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');\n      onScrollToIndexFailed({\n        averageItemLength: this._averageCellLength,\n        highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,\n        index: index\n      });\n      return;\n    }\n\n    var frame = this._getFrameMetricsApprox(index);\n\n    var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n\n    this._scrollRef.scrollTo(\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n     * comment suppresses an error when upgrading Flow's support for React.\n     * To see the error delete this comment and run Flow. */\n    horizontal ? {\n      x: offset,\n      animated: animated\n    } : {\n      y: offset,\n      animated: animated\n    });\n  }; // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n\n\n  VirtualizedList.prototype.scrollToItem = function scrollToItem(params) {\n    var item = params.item;\n    var _props2 = this.props,\n        data = _props2.data,\n        getItem = _props2.getItem,\n        getItemCount = _props2.getItemCount;\n    var itemCount = getItemCount(data);\n\n    for (var _index = 0; _index < itemCount; _index++) {\n      if (getItem(data, _index) === item) {\n        this.scrollToIndex(Object.assign({}, params, {\n          index: _index\n        }));\n        break;\n      }\n    }\n  };\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n\n\n  VirtualizedList.prototype.scrollToOffset = function scrollToOffset(params) {\n    var animated = params.animated,\n        offset = params.offset;\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n\n    this._scrollRef.scrollTo(\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n     * comment suppresses an error when upgrading Flow's support for React.\n     * To see the error delete this comment and run Flow. */\n    this.props.horizontal ? {\n      x: offset,\n      animated: animated\n    } : {\n      y: offset,\n      animated: animated\n    });\n  };\n\n  VirtualizedList.prototype.recordInteraction = function recordInteraction() {\n    this._nestedChildLists.forEach(function (childList) {\n      childList.ref && childList.ref.recordInteraction();\n    });\n\n    this._viewabilityTuples.forEach(function (t) {\n      t.viewabilityHelper.recordInteraction();\n    });\n\n    this._updateViewableItems(this.props.data);\n  };\n\n  VirtualizedList.prototype.flashScrollIndicators = function flashScrollIndicators() {\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._scrollRef.flashScrollIndicators();\n  };\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n\n\n  VirtualizedList.prototype.getScrollResponder = function getScrollResponder() {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  };\n\n  VirtualizedList.prototype.getScrollableNode = function getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollRef);\n    }\n  };\n\n  VirtualizedList.prototype.setNativeProps = function setNativeProps(props) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  };\n\n  VirtualizedList.prototype.getChildContext = function getChildContext() {\n    return {\n      virtualizedList: {\n        getScrollMetrics: this._getScrollMetrics,\n        horizontal: this.props.horizontal,\n        getOutermostParentListRef: this._getOutermostParentListRef,\n        getNestedChildState: this._getNestedChildState,\n        registerAsNestedChild: this._registerAsNestedChild,\n        unregisterAsNestedChild: this._unregisterAsNestedChild\n      }\n    };\n  };\n\n  VirtualizedList.prototype._getCellKey = function _getCellKey() {\n    return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';\n  };\n\n  VirtualizedList.prototype.hasMore = function hasMore() {\n    return this._hasMore;\n  };\n\n  function VirtualizedList(props, context) {\n    _classCallCheck(this, VirtualizedList);\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');\n    invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');\n    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);\n    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);\n\n    if (_this.props.viewabilityConfigCallbackPairs) {\n      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {\n        return {\n          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),\n          onViewableItemsChanged: pair.onViewableItemsChanged\n        };\n      });\n    } else if (_this.props.onViewableItemsChanged) {\n      _this._viewabilityTuples.push({\n        viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),\n        onViewableItemsChanged: _this.props.onViewableItemsChanged\n      });\n    }\n\n    var initialState = {\n      first: _this.props.initialScrollIndex || 0,\n      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1\n    };\n\n    if (_this._isNestedWithSameOrientation()) {\n      var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());\n\n      if (storedState) {\n        initialState = storedState;\n        _this.state = storedState;\n        _this._frames = storedState.frames;\n      }\n    }\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  VirtualizedList.prototype.componentDidMount = function componentDidMount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.virtualizedList.registerAsNestedChild({\n        cellKey: this._getCellKey(),\n        key: this.props.listKey || this._getCellKey(),\n        ref: this\n      });\n    }\n  };\n\n  VirtualizedList.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.virtualizedList.unregisterAsNestedChild({\n        key: this.props.listKey || this._getCellKey(),\n        state: {\n          first: this.state.first,\n          last: this.state.last,\n          frames: this._frames\n        }\n      });\n    }\n\n    this._updateViewableItems(null);\n\n    this._updateCellsToRenderBatcher.dispose({\n      abort: true\n    });\n\n    this._viewabilityTuples.forEach(function (tuple) {\n      tuple.viewabilityHelper.dispose();\n    });\n\n    this._fillRateHelper.deactivateAndFlush();\n  };\n\n  VirtualizedList.getDerivedStateFromProps = function getDerivedStateFromProps(newProps, prevState) {\n    var data = newProps.data,\n        extraData = newProps.extraData,\n        getItemCount = newProps.getItemCount,\n        maxToRenderPerBatch = newProps.maxToRenderPerBatch; // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n\n    return {\n      first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),\n      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))\n    };\n  };\n\n  VirtualizedList.prototype._pushCells = function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {\n    var _this2 = this;\n\n    var _props3 = this.props,\n        CellRendererComponent = _props3.CellRendererComponent,\n        ItemSeparatorComponent = _props3.ItemSeparatorComponent,\n        data = _props3.data,\n        getItem = _props3.getItem,\n        getItemCount = _props3.getItemCount,\n        horizontal = _props3.horizontal,\n        keyExtractor = _props3.keyExtractor;\n    var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    var end = getItemCount(data) - 1;\n    var prevCellKey = void 0;\n    last = Math.min(end, last);\n\n    var _loop = function _loop(ii) {\n      var item = getItem(data, ii);\n      var key = keyExtractor(item, ii);\n\n      _this2._indicesToKeys.set(ii, key);\n\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n\n      cells.push(React.createElement(CellRenderer, {\n        CellRendererComponent: CellRendererComponent,\n        ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,\n        cellKey: key,\n        fillRateHelper: _this2._fillRateHelper,\n        horizontal: horizontal,\n        index: ii,\n        inversionStyle: inversionStyle,\n        item: item,\n        key: key,\n        prevCellKey: prevCellKey,\n        onUpdateSeparators: _this2._onUpdateSeparators,\n        onLayout: function onLayout(e) {\n          return _this2._onCellLayout(e, key, ii);\n        },\n        onUnmount: _this2._onCellUnmount,\n        parentProps: _this2.props,\n        ref: function (_ref) {\n          function ref(_x) {\n            return _ref.apply(this, arguments);\n          }\n\n          ref.toString = function () {\n            return _ref.toString();\n          };\n\n          return ref;\n        }(function (ref) {\n          _this2._cellRefs[key] = ref;\n        })\n      }));\n      prevCellKey = key;\n    };\n\n    for (var ii = first; ii <= last; ii++) {\n      _loop(ii);\n    }\n  };\n\n  VirtualizedList.prototype._isVirtualizationDisabled = function _isVirtualizationDisabled() {\n    return this.props.disableVirtualization;\n  };\n\n  VirtualizedList.prototype._isNestedWithSameOrientation = function _isNestedWithSameOrientation() {\n    var nestedContext = this.context.virtualizedList;\n    return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);\n  };\n\n  VirtualizedList.prototype.render = function render() {\n    if (__DEV__) {\n      var flatStyles = flattenStyle(this.props.contentContainerStyle);\n      warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');\n    }\n\n    var _props4 = this.props,\n        ListEmptyComponent = _props4.ListEmptyComponent,\n        ListFooterComponent = _props4.ListFooterComponent,\n        ListHeaderComponent = _props4.ListHeaderComponent;\n    var _props5 = this.props,\n        data = _props5.data,\n        horizontal = _props5.horizontal;\n\n    var isVirtualizationDisabled = this._isVirtualizationDisabled();\n\n    var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;\n    var cells = [];\n    var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    var stickyHeaderIndices = [];\n\n    if (ListHeaderComponent) {\n      if (stickyIndicesFromProps.has(0)) {\n        stickyHeaderIndices.push(0);\n      }\n\n      var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : // $FlowFixMe\n      React.createElement(ListHeaderComponent, null);\n      cells.push(React.createElement(VirtualizedCellWrapper, {\n        cellKey: this._getCellKey() + '-header',\n        key: '$header'\n      }, React.createElement(View, {\n        onLayout: this._onLayoutHeader,\n        style: inversionStyle\n      }, element)));\n    }\n\n    var itemCount = this.props.getItemCount(data);\n\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      var spacerKey = !horizontal ? 'height' : 'width';\n      var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;\n      var _state = this.state,\n          _first = _state.first,\n          _last = _state.last;\n\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);\n\n      var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);\n\n      if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {\n        var insertedStickySpacer = false;\n\n        if (stickyIndicesFromProps.size > 0) {\n          var stickyOffset = ListHeaderComponent ? 1 : 0; // See if there are any sticky headers in the virtualized space that we need to render.\n\n          for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              var _ref2, _ref3;\n\n              var initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n\n              var stickyBlock = this._getFrameMetricsApprox(ii);\n\n              var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);\n              cells.push(React.createElement(View, {\n                key: '$sticky_lead',\n                style: (_ref2 = {}, _ref2[spacerKey] = leadSpace, _ref2)\n              }));\n\n              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);\n\n              var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);\n              cells.push(React.createElement(View, {\n                key: '$sticky_trail',\n                style: (_ref3 = {}, _ref3[spacerKey] = trailSpace, _ref3)\n              }));\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n\n        if (!insertedStickySpacer) {\n          var _ref4;\n\n          var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n\n          var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);\n\n          cells.push(React.createElement(View, {\n            key: '$lead_spacer',\n            style: (_ref4 = {}, _ref4[spacerKey] = firstSpace, _ref4)\n          }));\n        }\n      }\n\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);\n\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');\n        this._hasWarned.keys = true;\n      }\n\n      if (!isVirtualizationDisabled && _last < itemCount - 1) {\n        var _ref5;\n\n        var lastFrame = this._getFrameMetricsApprox(_last); // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n\n\n        var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n\n        var endFrame = this._getFrameMetricsApprox(end);\n\n        var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);\n        cells.push(React.createElement(View, {\n          key: '$tail_spacer',\n          style: (_ref5 = {}, _ref5[spacerKey] = tailSpacerLength, _ref5)\n        }));\n      }\n    } else if (ListEmptyComponent) {\n      var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : // $FlowFixMe\n      React.createElement(ListEmptyComponent, null);\n\n      cells.push(React.createElement(View, {\n        key: '$empty',\n        onLayout: this._onLayoutEmpty,\n        style: inversionStyle\n      }, _element));\n    }\n\n    if (ListFooterComponent) {\n      var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : // $FlowFixMe\n      React.createElement(ListFooterComponent, null);\n\n      cells.push(React.createElement(VirtualizedCellWrapper, {\n        cellKey: this._getCellKey() + '-footer',\n        key: '$footer'\n      }, React.createElement(View, {\n        onLayout: this._onLayoutFooter,\n        style: inversionStyle\n      }, _element2)));\n    }\n\n    var scrollProps = Object.assign({}, this.props, {\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      scrollEventThrottle: this.props.scrollEventThrottle,\n      // TODO: Android support\n      invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,\n      stickyHeaderIndices: stickyHeaderIndices\n    });\n\n    if (inversionStyle) {\n      scrollProps.style = [inversionStyle, this.props.style];\n    }\n\n    this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;\n    var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {\n      ref: this._captureScrollRef\n    }, cells);\n\n    if (this.props.debug) {\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        }\n      }, ret, this._renderDebugOverlay());\n    } else {\n      return ret;\n    }\n  };\n\n  VirtualizedList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _props6 = this.props,\n        data = _props6.data,\n        extraData = _props6.extraData;\n\n    if (data !== prevProps.data || extraData !== prevProps.extraData) {\n      this._hasDataChangedSinceEndReached = true; // clear the viewableIndices cache to also trigger\n      // the onViewableItemsChanged callback with the new data\n\n      this._viewabilityTuples.forEach(function (tuple) {\n        tuple.viewabilityHelper.resetViewableIndices();\n      });\n    }\n\n    this._scheduleCellsToRenderUpdate();\n  }; // Maps a cell key to the set of keys for all outermost child lists within that cell\n\n\n  VirtualizedList.prototype._computeBlankness = function _computeBlankness() {\n    this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);\n  };\n\n  VirtualizedList.prototype._onCellLayout = function _onCellLayout(e, cellKey, index) {\n    var layout = e.nativeEvent.layout;\n    var next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index: index,\n      inLayout: true\n    };\n    var curr = this._frames[cellKey];\n\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += curr ? 0 : 1;\n      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);\n\n      this._scheduleCellsToRenderUpdate();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n\n    this._computeBlankness();\n  };\n\n  VirtualizedList.prototype._measureLayoutRelativeToContainingList = function _measureLayoutRelativeToContainingList() {\n    var _this3 = this;\n\n    UIManager.measureLayout(findNodeHandle(this), findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {\n      console.warn(\"VirtualizedList: Encountered an error while measuring a list's\" + ' offset from its containing VirtualizedList.');\n    }, function (x, y, width, height) {\n      _this3._offsetFromParentVirtualizedList = _this3._selectOffset({\n        x: x,\n        y: y\n      });\n      _this3._scrollMetrics.contentLength = _this3._selectLength({\n        width: width,\n        height: height\n      });\n\n      var scrollMetrics = _this3._convertParentScrollMetrics(_this3.context.virtualizedList.getScrollMetrics());\n\n      _this3._scrollMetrics.visibleLength = scrollMetrics.visibleLength;\n      _this3._scrollMetrics.offset = scrollMetrics.offset;\n    });\n  };\n\n  VirtualizedList.prototype._renderDebugOverlay = function _renderDebugOverlay() {\n    var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    var framesInLayout = [];\n    var itemCount = this.props.getItemCount(this.props.data);\n\n    for (var ii = 0; ii < itemCount; ii++) {\n      var frame = this._getFrameMetricsApprox(ii);\n\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n\n    var windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n\n    var frameLast = this._getFrameMetricsApprox(this.state.last);\n\n    var windowLen = frameLast.offset + frameLast.length - windowTop;\n    var visTop = this._scrollMetrics.offset;\n    var visLen = this._scrollMetrics.visibleLength;\n    var baseStyle = {\n      position: 'absolute',\n      top: 0,\n      right: 0\n    };\n    return React.createElement(View, {\n      style: Object.assign({}, baseStyle, {\n        bottom: 0,\n        width: 20,\n        borderColor: 'blue',\n        borderWidth: 1\n      })\n    }, framesInLayout.map(function (f, ii) {\n      return React.createElement(View, {\n        key: 'f' + ii,\n        style: Object.assign({}, baseStyle, {\n          left: 0,\n          top: f.offset * normalize,\n          height: f.length * normalize,\n          backgroundColor: 'orange'\n        })\n      });\n    }), React.createElement(View, {\n      style: Object.assign({}, baseStyle, {\n        left: 0,\n        top: windowTop * normalize,\n        height: windowLen * normalize,\n        borderColor: 'green',\n        borderWidth: 2\n      })\n    }), React.createElement(View, {\n      style: Object.assign({}, baseStyle, {\n        left: 0,\n        top: visTop * normalize,\n        height: visLen * normalize,\n        borderColor: 'red',\n        borderWidth: 2\n      })\n    }));\n  };\n\n  VirtualizedList.prototype._selectLength = function _selectLength(metrics) {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  };\n\n  VirtualizedList.prototype._selectOffset = function _selectOffset(metrics) {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  };\n\n  VirtualizedList.prototype._maybeCallOnEndReached = function _maybeCallOnEndReached() {\n    var _props7 = this.props,\n        data = _props7.data,\n        getItemCount = _props7.getItemCount,\n        onEndReached = _props7.onEndReached,\n        onEndReachedThreshold = _props7.onEndReachedThreshold;\n    var _scrollMetrics = this._scrollMetrics,\n        contentLength = _scrollMetrics.contentLength,\n        visibleLength = _scrollMetrics.visibleLength,\n        offset = _scrollMetrics.offset;\n    var distanceFromEnd = contentLength - visibleLength - offset;\n\n    if (onEndReached && this.state.last === getItemCount(data) - 1 &&\n    /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.63 was deployed. To see the error delete this\n     * comment and run Flow. */\n    distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({\n        distanceFromEnd: distanceFromEnd\n      });\n    }\n  };\n  /* Translates metrics from a scroll event in a parent VirtualizedList into\n   * coordinates relative to the child list.\n   */\n\n\n  VirtualizedList.prototype._scheduleCellsToRenderUpdate = function _scheduleCellsToRenderUpdate() {\n    var _state2 = this.state,\n        first = _state2.first,\n        last = _state2.last;\n    var _scrollMetrics2 = this._scrollMetrics,\n        offset = _scrollMetrics2.offset,\n        visibleLength = _scrollMetrics2.visibleLength,\n        velocity = _scrollMetrics2.velocity;\n    var itemCount = this.props.getItemCount(this.props.data);\n    var hiPri = false;\n\n    if (first > 0 || last < itemCount - 1) {\n      var distTop = offset - this._getFrameMetricsApprox(first).offset;\n\n      var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);\n      var scrollingThreshold =\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete\n       * this comment and run Flow. */\n      this.props.onEndReachedThreshold * visibleLength / 2;\n      hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;\n    } // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n\n\n    if (hiPri && this._averageCellLength) {\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({\n        abort: true\n      });\n\n      this._updateCellsToRender();\n\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  };\n\n  VirtualizedList.prototype._updateViewableItems = function _updateViewableItems(data) {\n    var _this4 = this;\n\n    var getItemCount = this.props.getItemCount;\n\n    this._viewabilityTuples.forEach(function (tuple) {\n      tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);\n    });\n  };\n\n  return VirtualizedList;\n}(React.PureComponent);\n\nVirtualizedList.defaultProps = {\n  disableVirtualization: process.env.NODE_ENV === 'test',\n  horizontal: false,\n  initialNumToRender: 10,\n  keyExtractor: function keyExtractor(item, index) {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    _usedIndexForKey = true;\n    return String(index);\n  },\n  maxToRenderPerBatch: 10,\n  onEndReachedThreshold: 2,\n  // multiples of length\n  scrollEventThrottle: 50,\n  updateCellsBatchingPeriod: 50,\n  windowSize: 21 // multiples of length\n\n};\nVirtualizedList.contextTypes = {\n  virtualizedCell: PropTypes.shape({\n    cellKey: PropTypes.string\n  }),\n  virtualizedList: PropTypes.shape({\n    getScrollMetrics: PropTypes.func,\n    horizontal: PropTypes.bool,\n    getOutermostParentListRef: PropTypes.func,\n    getNestedChildState: PropTypes.func,\n    registerAsNestedChild: PropTypes.func,\n    unregisterAsNestedChild: PropTypes.func\n  })\n};\nVirtualizedList.childContextTypes = {\n  virtualizedList: PropTypes.shape({\n    getScrollMetrics: PropTypes.func,\n    horizontal: PropTypes.bool,\n    getOutermostParentListRef: PropTypes.func,\n    getNestedChildState: PropTypes.func,\n    registerAsNestedChild: PropTypes.func,\n    unregisterAsNestedChild: PropTypes.func\n  })\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this7 = this;\n\n  this._getScrollMetrics = function () {\n    return _this7._scrollMetrics;\n  };\n\n  this._getOutermostParentListRef = function () {\n    if (_this7._isNestedWithSameOrientation()) {\n      return _this7.context.virtualizedList.getOutermostParentListRef();\n    } else {\n      return _this7;\n    }\n  };\n\n  this._getNestedChildState = function (key) {\n    var existingChildData = _this7._nestedChildLists.get(key);\n\n    return existingChildData && existingChildData.state;\n  };\n\n  this._registerAsNestedChild = function (childList) {\n    // Register the mapping between this child key and the cellKey for its cell\n    var childListsInCell = _this7._cellKeysToChildListKeys.get(childList.cellKey) || new Set();\n    childListsInCell.add(childList.key);\n\n    _this7._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);\n\n    var existingChildData = _this7._nestedChildLists.get(childList.key);\n\n    invariant(!(existingChildData && existingChildData.ref !== null), 'A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.');\n\n    _this7._nestedChildLists.set(childList.key, {\n      ref: childList.ref,\n      state: null\n    });\n\n    if (_this7._hasInteracted) {\n      childList.ref.recordInteraction();\n    }\n  };\n\n  this._unregisterAsNestedChild = function (childList) {\n    _this7._nestedChildLists.set(childList.key, {\n      ref: null,\n      state: childList.state\n    });\n  };\n\n  this._onUpdateSeparators = function (keys, newProps) {\n    keys.forEach(function (key) {\n      var ref = key != null && _this7._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  this._averageCellLength = 0;\n  this._cellKeysToChildListKeys = new Map();\n  this._cellRefs = {};\n  this._frames = {};\n  this._footerLength = 0;\n  this._hasDataChangedSinceEndReached = true;\n  this._hasInteracted = false;\n  this._hasMore = false;\n  this._hasWarned = {};\n  this._highestMeasuredFrameIndex = 0;\n  this._headerLength = 0;\n  this._indicesToKeys = new Map();\n  this._hasDoneInitialScroll = false;\n  this._nestedChildLists = new Map();\n  this._offsetFromParentVirtualizedList = 0;\n  this._prevParentOffset = 0;\n  this._scrollMetrics = {\n    contentLength: 0,\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0\n  };\n  this._scrollRef = null;\n  this._sentEndForContentLength = 0;\n  this._totalCellLength = 0;\n  this._totalCellsMeasured = 0;\n  this._viewabilityTuples = [];\n\n  this._captureScrollRef = function (ref) {\n    _this7._scrollRef = ref;\n  };\n\n  this._defaultRenderScrollComponent = function (props) {\n    if (_this7._isNestedWithSameOrientation()) {\n      return React.createElement(View, props);\n    } else if (props.onRefresh) {\n      invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n      return React.createElement(ScrollView, _extends({}, props, {\n        refreshControl:\n        /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n         * comment suppresses an error when upgrading Flow's support for\n         * React. To see the error delete this comment and run Flow. */\n        React.createElement(RefreshControl, {\n          refreshing: props.refreshing,\n          onRefresh: props.onRefresh,\n          progressViewOffset: props.progressViewOffset\n        })\n      }));\n    } else {\n      return React.createElement(ScrollView, props);\n    }\n  };\n\n  this._onCellUnmount = function (cellKey) {\n    var curr = _this7._frames[cellKey];\n\n    if (curr) {\n      _this7._frames[cellKey] = Object.assign({}, curr, {\n        inLayout: false\n      });\n    }\n  };\n\n  this._onLayout = function (e) {\n    if (_this7._isNestedWithSameOrientation()) {\n      // Need to adjust our scroll metrics to be relative to our containing\n      // VirtualizedList before we can make claims about list item viewability\n      _this7._measureLayoutRelativeToContainingList();\n    } else {\n      _this7._scrollMetrics.visibleLength = _this7._selectLength(e.nativeEvent.layout);\n    }\n\n    _this7.props.onLayout && _this7.props.onLayout(e);\n\n    _this7._scheduleCellsToRenderUpdate();\n\n    _this7._maybeCallOnEndReached();\n  };\n\n  this._onLayoutEmpty = function (e) {\n    _this7.props.onLayout && _this7.props.onLayout(e);\n  };\n\n  this._onLayoutFooter = function (e) {\n    _this7._footerLength = _this7._selectLength(e.nativeEvent.layout);\n  };\n\n  this._onLayoutHeader = function (e) {\n    _this7._headerLength = _this7._selectLength(e.nativeEvent.layout);\n  };\n\n  this._onContentSizeChange = function (width, height) {\n    if (width > 0 && height > 0 && _this7.props.initialScrollIndex != null && _this7.props.initialScrollIndex > 0 && !_this7._hasDoneInitialScroll) {\n      _this7.scrollToIndex({\n        animated: false,\n        index: _this7.props.initialScrollIndex\n      });\n\n      _this7._hasDoneInitialScroll = true;\n    }\n\n    if (_this7.props.onContentSizeChange) {\n      _this7.props.onContentSizeChange(width, height);\n    }\n\n    _this7._scrollMetrics.contentLength = _this7._selectLength({\n      height: height,\n      width: width\n    });\n\n    _this7._scheduleCellsToRenderUpdate();\n\n    _this7._maybeCallOnEndReached();\n  };\n\n  this._convertParentScrollMetrics = function (metrics) {\n    // Offset of the top of the nested list relative to the top of its parent's viewport\n    var offset = metrics.offset - _this7._offsetFromParentVirtualizedList; // Child's visible length is the same as its parent's\n\n    var visibleLength = metrics.visibleLength;\n    var dOffset = offset - _this7._scrollMetrics.offset;\n    var contentLength = _this7._scrollMetrics.contentLength;\n    return {\n      visibleLength: visibleLength,\n      contentLength: contentLength,\n      offset: offset,\n      dOffset: dOffset\n    };\n  };\n\n  this._onScroll = function (e) {\n    _this7._nestedChildLists.forEach(function (childList) {\n      childList.ref && childList.ref._onScroll(e);\n    });\n\n    if (_this7.props.onScroll) {\n      _this7.props.onScroll(e);\n    }\n\n    var timestamp = e.timeStamp;\n\n    var visibleLength = _this7._selectLength(e.nativeEvent.layoutMeasurement);\n\n    var contentLength = _this7._selectLength(e.nativeEvent.contentSize);\n\n    var offset = _this7._selectOffset(e.nativeEvent.contentOffset);\n\n    var dOffset = offset - _this7._scrollMetrics.offset;\n\n    if (_this7._isNestedWithSameOrientation()) {\n      if (_this7._scrollMetrics.contentLength === 0) {\n        // Ignore scroll events until onLayout has been called and we\n        // know our offset from our offset from our parent\n        return;\n      }\n\n      var _convertParentScrollM = _this7._convertParentScrollMetrics({\n        visibleLength: visibleLength,\n        offset: offset\n      });\n\n      visibleLength = _convertParentScrollM.visibleLength;\n      contentLength = _convertParentScrollM.contentLength;\n      offset = _convertParentScrollM.offset;\n      dOffset = _convertParentScrollM.dOffset;\n    }\n\n    var dt = _this7._scrollMetrics.timestamp ? Math.max(1, timestamp - _this7._scrollMetrics.timestamp) : 1;\n    var velocity = dOffset / dt;\n\n    if (dt > 500 && _this7._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this7._hasWarned.perf) {\n      infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {\n        dt: dt,\n        prevDt: _this7._scrollMetrics.dt,\n        contentLength: contentLength\n      });\n      _this7._hasWarned.perf = true;\n    }\n\n    _this7._scrollMetrics = {\n      contentLength: contentLength,\n      dt: dt,\n      dOffset: dOffset,\n      offset: offset,\n      timestamp: timestamp,\n      velocity: velocity,\n      visibleLength: visibleLength\n    };\n\n    _this7._updateViewableItems(_this7.props.data);\n\n    if (!_this7.props) {\n      return;\n    }\n\n    _this7._maybeCallOnEndReached();\n\n    if (velocity !== 0) {\n      _this7._fillRateHelper.activate();\n    }\n\n    _this7._computeBlankness();\n\n    _this7._scheduleCellsToRenderUpdate();\n  };\n\n  this._onScrollBeginDrag = function (e) {\n    _this7._nestedChildLists.forEach(function (childList) {\n      childList.ref && childList.ref._onScrollBeginDrag(e);\n    });\n\n    _this7._viewabilityTuples.forEach(function (tuple) {\n      tuple.viewabilityHelper.recordInteraction();\n    });\n\n    _this7._hasInteracted = true;\n    _this7.props.onScrollBeginDrag && _this7.props.onScrollBeginDrag(e);\n  };\n\n  this._onScrollEndDrag = function (e) {\n    var velocity = e.nativeEvent.velocity;\n\n    if (velocity) {\n      _this7._scrollMetrics.velocity = _this7._selectOffset(velocity);\n    }\n\n    _this7._computeBlankness();\n\n    _this7.props.onScrollEndDrag && _this7.props.onScrollEndDrag(e);\n  };\n\n  this._onMomentumScrollEnd = function (e) {\n    _this7._scrollMetrics.velocity = 0;\n\n    _this7._computeBlankness();\n\n    _this7.props.onMomentumScrollEnd && _this7.props.onMomentumScrollEnd(e);\n  };\n\n  this._updateCellsToRender = function () {\n    var _props9 = _this7.props,\n        data = _props9.data,\n        getItemCount = _props9.getItemCount,\n        onEndReachedThreshold = _props9.onEndReachedThreshold;\n\n    var isVirtualizationDisabled = _this7._isVirtualizationDisabled();\n\n    _this7._updateViewableItems(data);\n\n    if (!data) {\n      return;\n    }\n\n    _this7.setState(function (state) {\n      var newState = void 0;\n\n      if (!isVirtualizationDisabled) {\n        // If we run this with bogus data, we'll force-render window {first: 0, last: 0},\n        // and wipe out the initialNumToRender rendered elements.\n        // So let's wait until the scroll view metrics have been set up. And until then,\n        // we will trust the initialNumToRender suggestion\n        if (_this7._scrollMetrics.visibleLength) {\n          // If we have a non-zero initialScrollIndex and run this before we've scrolled,\n          // we'll wipe out the initialNumToRender rendered elements starting at initialScrollIndex.\n          // So let's wait until we've scrolled the view to the right place. And until then,\n          // we will trust the initialScrollIndex suggestion.\n          if (!_this7.props.initialScrollIndex || _this7._scrollMetrics.offset) {\n            newState = computeWindowedRenderLimits(_this7.props, state, _this7._getFrameMetricsApprox, _this7._scrollMetrics);\n          }\n        }\n      } else {\n        var _scrollMetrics3 = _this7._scrollMetrics,\n            contentLength = _scrollMetrics3.contentLength,\n            _offset = _scrollMetrics3.offset,\n            visibleLength = _scrollMetrics3.visibleLength;\n\n        var _distanceFromEnd = contentLength - visibleLength - _offset;\n\n        var renderAhead =\n        /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses\n         * an error found when Flow v0.63 was deployed. To see the error\n         * delete this comment and run Flow. */\n        _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this7.props.maxToRenderPerBatch : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1)\n        };\n      }\n\n      if (newState && _this7._nestedChildLists.size > 0) {\n        var newFirst = newState.first;\n        var newLast = newState.last; // If some cell in the new state has a child list in it, we should only render\n        // up through that item, so that we give that list a chance to render.\n        // Otherwise there's churn from multiple child lists mounting and un-mounting\n        // their items.\n\n        for (var ii = newFirst; ii <= newLast; ii++) {\n          var cellKeyForIndex = _this7._indicesToKeys.get(ii);\n\n          var childListKeys = cellKeyForIndex && _this7._cellKeysToChildListKeys.get(cellKeyForIndex);\n\n          if (!childListKeys) {\n            continue;\n          }\n\n          var someChildHasMore = false; // For each cell, need to check whether any child list in it has more elements to render\n\n          for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref6;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref6 = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref6 = _i.value;\n            }\n\n            var childKey = _ref6;\n\n            var childList = _this7._nestedChildLists.get(childKey);\n\n            if (childList && childList.ref && childList.ref.hasMore()) {\n              someChildHasMore = true;\n              break;\n            }\n          }\n\n          if (someChildHasMore) {\n            newState.last = ii;\n            break;\n          }\n        }\n      }\n\n      return newState;\n    });\n  };\n\n  this._createViewToken = function (index, isViewable) {\n    var _props10 = _this7.props,\n        data = _props10.data,\n        getItem = _props10.getItem,\n        keyExtractor = _props10.keyExtractor;\n    var item = getItem(data, index);\n    return {\n      index: index,\n      item: item,\n      key: keyExtractor(item, index),\n      isViewable: isViewable\n    };\n  };\n\n  this._getFrameMetricsApprox = function (index) {\n    var frame = _this7._getFrameMetrics(index);\n\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      var _getItemLayout = _this7.props.getItemLayout;\n      invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');\n      return {\n        length: _this7._averageCellLength,\n        offset: _this7._averageCellLength * index\n      };\n    }\n  };\n\n  this._getFrameMetrics = function (index) {\n    var _props11 = _this7.props,\n        data = _props11.data,\n        getItem = _props11.getItem,\n        getItemCount = _props11.getItemCount,\n        getItemLayout = _props11.getItemLayout,\n        keyExtractor = _props11.keyExtractor;\n    invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);\n    var item = getItem(data, index);\n\n    var frame = item && _this7._frames[keyExtractor(item, index)];\n\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n\n        if (__DEV__) {\n          var frameType = PropTypes.shape({\n            length: PropTypes.number.isRequired,\n            offset: PropTypes.number.isRequired,\n            index: PropTypes.number.isRequired\n          }).isRequired;\n          PropTypes.checkPropTypes({\n            frame: frameType\n          }, {\n            frame: frame\n          }, 'frame', 'VirtualizedList.getItemLayout');\n        }\n      }\n    }\n    /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.63 was deployed. To see the error delete this\n     * comment and run Flow. */\n\n\n    return frame;\n  };\n};\n\nvar CellRenderer = function (_React$Component) {\n  _inherits(CellRenderer, _React$Component);\n\n  function CellRenderer() {\n    var _temp, _this5, _ret2;\n\n    _classCallCheck(this, CellRenderer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret2 = (_temp = (_this5 = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this5), _this5.state = {\n      separatorProps: {\n        highlighted: false,\n        leadingItem: _this5.props.item\n      }\n    }, _this5._separators = {\n      highlight: function highlight() {\n        var _this5$props = _this5.props,\n            cellKey = _this5$props.cellKey,\n            prevCellKey = _this5$props.prevCellKey;\n\n        _this5.props.onUpdateSeparators([cellKey, prevCellKey], {\n          highlighted: true\n        });\n      },\n      unhighlight: function unhighlight() {\n        var _this5$props2 = _this5.props,\n            cellKey = _this5$props2.cellKey,\n            prevCellKey = _this5$props2.prevCellKey;\n\n        _this5.props.onUpdateSeparators([cellKey, prevCellKey], {\n          highlighted: false\n        });\n      },\n      updateProps: function updateProps(select, newProps) {\n        var _this5$props3 = _this5.props,\n            cellKey = _this5$props3.cellKey,\n            prevCellKey = _this5$props3.prevCellKey;\n\n        _this5.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);\n      }\n    }, _temp), _possibleConstructorReturn(_this5, _ret2);\n  }\n\n  CellRenderer.prototype.getChildContext = function getChildContext() {\n    return {\n      virtualizedCell: {\n        cellKey: this.props.cellKey\n      }\n    };\n  }; // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n\n\n  CellRenderer.prototype.updateSeparatorProps = function updateSeparatorProps(newProps) {\n    this.setState(function (state) {\n      return {\n        separatorProps: Object.assign({}, state.separatorProps, newProps)\n      };\n    });\n  };\n\n  CellRenderer.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  };\n\n  CellRenderer.prototype.render = function render() {\n    var _props8 = this.props,\n        CellRendererComponent = _props8.CellRendererComponent,\n        ItemSeparatorComponent = _props8.ItemSeparatorComponent,\n        fillRateHelper = _props8.fillRateHelper,\n        horizontal = _props8.horizontal,\n        item = _props8.item,\n        index = _props8.index,\n        inversionStyle = _props8.inversionStyle,\n        parentProps = _props8.parentProps;\n    var renderItem = parentProps.renderItem,\n        getItemLayout = parentProps.getItemLayout;\n    invariant(renderItem, 'no renderItem!');\n    var element = renderItem({\n      item: item,\n      index: index,\n      separators: this._separators\n    });\n    var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout; // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n\n    var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);\n    var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;\n\n    if (!CellRendererComponent) {\n      return React.createElement(View, {\n        style: cellStyle,\n        onLayout: onLayout\n      }, element, itemSeparator);\n    }\n\n    return React.createElement(CellRendererComponent, _extends({}, this.props, {\n      style: cellStyle,\n      onLayout: onLayout\n    }), element, itemSeparator);\n  };\n\n  return CellRenderer;\n}(React.Component);\n\nCellRenderer.childContextTypes = {\n  virtualizedCell: PropTypes.shape({\n    cellKey: PropTypes.string\n  })\n};\n\nvar VirtualizedCellWrapper = function (_React$Component2) {\n  _inherits(VirtualizedCellWrapper, _React$Component2);\n\n  function VirtualizedCellWrapper() {\n    _classCallCheck(this, VirtualizedCellWrapper);\n\n    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));\n  }\n\n  VirtualizedCellWrapper.prototype.getChildContext = function getChildContext() {\n    return {\n      virtualizedCell: {\n        cellKey: this.props.cellKey\n      }\n    };\n  };\n\n  VirtualizedCellWrapper.prototype.render = function render() {\n    return this.props.children;\n  };\n\n  return VirtualizedCellWrapper;\n}(React.Component);\n\nVirtualizedCellWrapper.childContextTypes = {\n  virtualizedCell: PropTypes.shape({\n    cellKey: PropTypes.string\n  })\n};\nvar styles = StyleSheet.create({\n  verticallyInverted: {\n    transform: [{\n      scaleY: -1\n    }]\n  },\n  horizontallyInverted: {\n    transform: [{\n      scaleX: -1\n    }]\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  rowReverse: {\n    flexDirection: 'row-reverse'\n  },\n  columnReverse: {\n    flexDirection: 'column-reverse'\n  }\n});\nvar _default = VirtualizedList;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_extends, \"_extends\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_classCallCheck, \"_classCallCheck\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_possibleConstructorReturn, \"_possibleConstructorReturn\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_inherits, \"_inherits\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(flattenStyle, \"flattenStyle\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(__DEV__, \"__DEV__\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_usedIndexForKey, \"_usedIndexForKey\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(VirtualizedList, \"VirtualizedList\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_initialiseProps, \"_initialiseProps\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(CellRenderer, \"CellRenderer\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(VirtualizedCellWrapper, \"VirtualizedCellWrapper\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(styles, \"styles\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\VirtualizedList\\\\index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}