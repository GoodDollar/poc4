{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\n/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar emptyArray = [];\n\nvar emptyFunction = function emptyFunction() {};\n\nvar getRect = function getRect(node) {\n  if (node) {\n    var isElement = node.nodeType === 1\n    /* Node.ELEMENT_NODE */\n    ;\n\n    if (isElement && typeof node.getBoundingClientRect === 'function') {\n      return node.getBoundingClientRect();\n    }\n  }\n}; // Mobile Safari re-uses touch objects, so we copy the properties we want and normalize the identifier\n\n\nvar normalizeTouches = function normalizeTouches(touches) {\n  if (!touches) {\n    return emptyArray;\n  }\n\n  return Array.prototype.slice.call(touches).map(function (touch) {\n    var identifier = touch.identifier > 20 ? touch.identifier % 20 : touch.identifier;\n    var rect = void 0;\n    return {\n      _normalized: true,\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      force: touch.force,\n\n      get locationX() {\n        rect = rect || getRect(touch.target);\n\n        if (rect) {\n          return touch.pageX - rect.left;\n        }\n      },\n\n      get locationY() {\n        rect = rect || getRect(touch.target);\n\n        if (rect) {\n          return touch.pageY - rect.top;\n        }\n      },\n\n      identifier: identifier,\n      pageX: touch.pageX,\n      pageY: touch.pageY,\n      radiusX: touch.radiusX,\n      radiusY: touch.radiusY,\n      rotationAngle: touch.rotationAngle,\n      screenX: touch.screenX,\n      screenY: touch.screenY,\n      target: touch.target,\n      // normalize the timestamp\n      // https://stackoverflow.com/questions/26177087/ios-8-mobile-safari-wrong-timestamp-on-touch-events\n      timestamp: Date.now()\n    };\n  });\n};\n\nfunction normalizeTouchEvent(nativeEvent) {\n  var changedTouches = normalizeTouches(nativeEvent.changedTouches);\n  var touches = normalizeTouches(nativeEvent.touches);\n  var preventDefault = typeof nativeEvent.preventDefault === 'function' ? nativeEvent.preventDefault.bind(nativeEvent) : emptyFunction;\n  var stopImmediatePropagation = typeof nativeEvent.stopImmediatePropagation === 'function' ? nativeEvent.stopImmediatePropagation.bind(nativeEvent) : emptyFunction;\n  var stopPropagation = typeof nativeEvent.stopPropagation === 'function' ? nativeEvent.stopPropagation.bind(nativeEvent) : emptyFunction;\n  var singleChangedTouch = changedTouches[0];\n  var event = {\n    _normalized: true,\n    bubbles: nativeEvent.bubbles,\n    cancelable: nativeEvent.cancelable,\n    changedTouches: changedTouches,\n    defaultPrevented: nativeEvent.defaultPrevented,\n    identifier: singleChangedTouch ? singleChangedTouch.identifier : undefined,\n\n    get locationX() {\n      return singleChangedTouch ? singleChangedTouch.locationX : undefined;\n    },\n\n    get locationY() {\n      return singleChangedTouch ? singleChangedTouch.locationY : undefined;\n    },\n\n    pageX: singleChangedTouch ? singleChangedTouch.pageX : nativeEvent.pageX,\n    pageY: singleChangedTouch ? singleChangedTouch.pageY : nativeEvent.pageY,\n    preventDefault: preventDefault,\n    stopImmediatePropagation: stopImmediatePropagation,\n    stopPropagation: stopPropagation,\n    target: nativeEvent.target,\n    // normalize the timestamp\n    // https://stackoverflow.com/questions/26177087/ios-8-mobile-safari-wrong-timestamp-on-touch-events\n    timestamp: Date.now(),\n    touches: touches,\n    type: nativeEvent.type,\n    which: nativeEvent.which\n  };\n  return event;\n}\n\nfunction normalizeMouseEvent(nativeEvent) {\n  var rect = void 0;\n  var touches = [{\n    _normalized: true,\n    clientX: nativeEvent.clientX,\n    clientY: nativeEvent.clientY,\n    force: nativeEvent.force,\n    identifier: 0,\n\n    get locationX() {\n      rect = rect || getRect(nativeEvent.target);\n\n      if (rect) {\n        return nativeEvent.pageX - rect.left;\n      }\n    },\n\n    get locationY() {\n      rect = rect || getRect(nativeEvent.target);\n\n      if (rect) {\n        return nativeEvent.pageY - rect.top;\n      }\n    },\n\n    pageX: nativeEvent.pageX,\n    pageY: nativeEvent.pageY,\n    screenX: nativeEvent.screenX,\n    screenY: nativeEvent.screenY,\n    target: nativeEvent.target,\n    timestamp: Date.now()\n  }];\n  var preventDefault = typeof nativeEvent.preventDefault === 'function' ? nativeEvent.preventDefault.bind(nativeEvent) : emptyFunction;\n  var stopImmediatePropagation = typeof nativeEvent.stopImmediatePropagation === 'function' ? nativeEvent.stopImmediatePropagation.bind(nativeEvent) : emptyFunction;\n  var stopPropagation = typeof nativeEvent.stopPropagation === 'function' ? nativeEvent.stopPropagation.bind(nativeEvent) : emptyFunction;\n  return {\n    _normalized: true,\n    bubbles: nativeEvent.bubbles,\n    cancelable: nativeEvent.cancelable,\n    changedTouches: touches,\n    defaultPrevented: nativeEvent.defaultPrevented,\n    identifier: touches[0].identifier,\n\n    get locationX() {\n      return touches[0].locationX;\n    },\n\n    get locationY() {\n      return touches[0].locationY;\n    },\n\n    pageX: nativeEvent.pageX,\n    pageY: nativeEvent.pageY,\n    preventDefault: preventDefault,\n    stopImmediatePropagation: stopImmediatePropagation,\n    stopPropagation: stopPropagation,\n    target: nativeEvent.target,\n    timestamp: touches[0].timestamp,\n    touches: nativeEvent.type === 'mouseup' ? emptyArray : touches,\n    type: nativeEvent.type,\n    which: nativeEvent.which\n  };\n} // TODO: how to best handle keyboard events?\n\n\nfunction normalizeNativeEvent(nativeEvent) {\n  if (!nativeEvent || nativeEvent._normalized) {\n    return nativeEvent;\n  }\n\n  var eventType = nativeEvent.type || '';\n  var mouse = eventType.indexOf('mouse') >= 0;\n\n  if (mouse) {\n    return normalizeMouseEvent(nativeEvent);\n  } else {\n    return normalizeTouchEvent(nativeEvent);\n  }\n}\n\nvar _default = normalizeNativeEvent;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(emptyArray, \"emptyArray\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(emptyFunction, \"emptyFunction\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(getRect, \"getRect\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(normalizeTouches, \"normalizeTouches\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(normalizeTouchEvent, \"normalizeTouchEvent\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(normalizeMouseEvent, \"normalizeMouseEvent\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(normalizeNativeEvent, \"normalizeNativeEvent\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\modules\\\\normalizeNativeEvent\\\\index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}