{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.register=register;exports.unregister=unregister;(function(){var enterModule=(typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal:require('react-hot-loader')).enterModule;enterModule&&enterModule(module);})();var isLocalhost=Boolean(window.location.hostname==='localhost'||window.location.hostname==='[::1]'||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){var publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){return;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){checkValidServiceWorker(swUrl,config);navigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit http://bit.ly/CRA-PWA');});}else{registerValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){console.log('New content is available and will be used when all '+'tabs for this page are closed. See http://bit.ly/CRA-PWA.');if(config&&config.onUpdate){config.onUpdate(registration);}}else{console.log('Content is cached for offline use.');if(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){fetch(swUrl).then(function(response){var contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){navigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{registerValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}};(function(){var reactHotLoader=(typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal:require('react-hot-loader')).default;if(!reactHotLoader){return;}reactHotLoader.register(isLocalhost,\"isLocalhost\",\"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\src\\\\serviceWorker.js\");reactHotLoader.register(register,\"register\",\"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\src\\\\serviceWorker.js\");reactHotLoader.register(registerValidSW,\"registerValidSW\",\"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\src\\\\serviceWorker.js\");reactHotLoader.register(checkValidServiceWorker,\"checkValidServiceWorker\",\"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\src\\\\serviceWorker.js\");reactHotLoader.register(unregister,\"unregister\",\"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\src\\\\serviceWorker.js\");})();;(function(){var leaveModule=(typeof reactHotLoaderGlobal!=='undefined'?reactHotLoaderGlobal:require('react-hot-loader')).leaveModule;leaveModule&&leaveModule(module);})();","map":{"version":3,"sources":["D:\\projects\\gooddollar\\react-native-app\\GoodIdentity\\src\\serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}