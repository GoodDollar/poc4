{"ast":null,"code":"var Class = require('./class');\n\nmodule.exports = Class({\n  initialize: function initialize(path) {\n    this.reset().push(path);\n  },\n\n  /* parser */\n  push: function push() {\n    var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\\-+]?(?:[\\d\\.]e[\\-+]?|[^\\s\\-+,a-z])+/ig);\n    if (!p) return this;\n    var last,\n        cmd = p[0],\n        i = 1;\n\n    while (cmd) {\n      switch (cmd) {\n        case 'm':\n          this.move(p[i++], p[i++]);\n          break;\n\n        case 'l':\n          this.line(p[i++], p[i++]);\n          break;\n\n        case 'c':\n          this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\n          break;\n\n        case 's':\n          this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);\n          break;\n\n        case 'q':\n          this.curve(p[i++], p[i++], p[i++], p[i++]);\n          break;\n\n        case 't':\n          this.curve(p[i++], p[i++]);\n          break;\n\n        case 'a':\n          this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);\n          i += 7;\n          break;\n\n        case 'h':\n          this.line(p[i++], 0);\n          break;\n\n        case 'v':\n          this.line(0, p[i++]);\n          break;\n\n        case 'M':\n          this.moveTo(p[i++], p[i++]);\n          break;\n\n        case 'L':\n          this.lineTo(p[i++], p[i++]);\n          break;\n\n        case 'C':\n          this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\n          break;\n\n        case 'S':\n          this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);\n          break;\n\n        case 'Q':\n          this.curveTo(p[i++], p[i++], p[i++], p[i++]);\n          break;\n\n        case 'T':\n          this.curveTo(p[i++], p[i++]);\n          break;\n\n        case 'A':\n          this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);\n          i += 7;\n          break;\n\n        case 'H':\n          this.lineTo(p[i++], this.penY);\n          break;\n\n        case 'V':\n          this.lineTo(this.penX, p[i++]);\n          break;\n\n        case 'Z':\n        case 'z':\n          this.close();\n          break;\n\n        default:\n          cmd = last;\n          i--;\n          continue;\n      }\n\n      last = cmd;\n      if (last == 'm') last = 'l';else if (last == 'M') last = 'L';\n      cmd = p[i++];\n    }\n\n    return this;\n  },\n\n  /* utility methods */\n  reset: function reset() {\n    this.penX = this.penY = 0;\n    this.penDownX = this.penDownY = null;\n    this._pivotX = this._pivotY = 0;\n    this.onReset();\n    return this;\n  },\n  move: function move(x, y) {\n    this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);\n    return this;\n  },\n  moveTo: function moveTo(x, y) {\n    this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);\n    return this;\n  },\n  line: function line(x, y) {\n    return this.lineTo(this.penX + +x, this.penY + +y);\n  },\n  lineTo: function lineTo(x, y) {\n    if (this.penDownX == null) {\n      this.penDownX = this.penX;\n      this.penDownY = this.penY;\n    }\n\n    this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);\n    return this;\n  },\n  curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {\n    var x = this.penX,\n        y = this.penY;\n    return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);\n  },\n  curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {\n    var x = this.penX,\n        y = this.penY;\n\n    if (c2x == null) {\n      c2x = +c1x;\n      c2y = +c1y;\n      c1x = x * 2 - (this._pivotX || 0);\n      c1y = y * 2 - (this._pivotY || 0);\n    }\n\n    if (ex == null) {\n      this._pivotX = +c1x;\n      this._pivotY = +c1y;\n      ex = +c2x;\n      ey = +c2y;\n      c2x = (ex + +c1x * 2) / 3;\n      c2y = (ey + +c1y * 2) / 3;\n      c1x = (x + +c1x * 2) / 3;\n      c1y = (y + +c1y * 2) / 3;\n    } else {\n      this._pivotX = +c2x;\n      this._pivotY = +c2y;\n    }\n\n    if (this.penDownX == null) {\n      this.penDownX = x;\n      this.penDownY = y;\n    }\n\n    this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);\n    return this;\n  },\n  arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {\n    return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);\n  },\n  arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {\n    ry = Math.abs(+ry || +rx || +y - this.penY);\n    rx = Math.abs(+rx || +x - this.penX);\n    if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);\n    var tX = this.penX,\n        tY = this.penY,\n        clockwise = !+counterClockwise,\n        large = !!+outer;\n    var rad = rotation ? rotation * Math.PI / 180 : 0,\n        cos = Math.cos(rad),\n        sin = Math.sin(rad);\n    x -= tX;\n    y -= tY; // Ellipse Center\n\n    var cx = cos * x / 2 + sin * y / 2,\n        cy = -sin * x / 2 + cos * y / 2,\n        rxry = rx * rx * ry * ry,\n        rycx = ry * ry * cx * cx,\n        rxcy = rx * rx * cy * cy,\n        a = rxry - rxcy - rycx;\n\n    if (a < 0) {\n      a = Math.sqrt(1 - a / rxry);\n      rx *= a;\n      ry *= a;\n      cx = x / 2;\n      cy = y / 2;\n    } else {\n      a = Math.sqrt(a / (rxcy + rycx));\n      if (large == clockwise) a = -a;\n      var cxd = -a * cy * rx / ry,\n          cyd = a * cx * ry / rx;\n      cx = cos * cxd - sin * cyd + x / 2;\n      cy = sin * cxd + cos * cyd + y / 2;\n    } // Rotation + Scale Transform\n\n\n    var xx = cos / rx,\n        yx = sin / rx,\n        xy = -sin / ry,\n        yy = cos / ry; // Start and End Angle\n\n    var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),\n        ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));\n    cx += tX;\n    cy += tY;\n    x += tX;\n    y += tY; // Circular Arc\n\n    if (this.penDownX == null) {\n      this.penDownX = this.penX;\n      this.penDownY = this.penY;\n    }\n\n    this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);\n    return this;\n  },\n  counterArc: function counterArc(x, y, rx, ry, outer) {\n    return this.arc(x, y, rx, ry, outer, true);\n  },\n  counterArcTo: function counterArcTo(x, y, rx, ry, outer) {\n    return this.arcTo(x, y, rx, ry, outer, true);\n  },\n  close: function close() {\n    if (this.penDownX != null) {\n      this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);\n      this.penDownX = null;\n    }\n\n    return this;\n  },\n\n  /* overridable handlers */\n  onReset: function onReset() {},\n  onMove: function onMove(sx, sy, ex, ey) {},\n  onLine: function onLine(sx, sy, ex, ey) {\n    this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);\n  },\n  onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {\n    var gx = ex - sx,\n        gy = ey - sy,\n        g = gx * gx + gy * gy,\n        v1,\n        v2,\n        cx,\n        cy,\n        u;\n    cx = c1x - sx;\n    cy = c1y - sy;\n    u = cx * gx + cy * gy;\n\n    if (u > g) {\n      cx -= gx;\n      cy -= gy;\n    } else if (u > 0 && g != 0) {\n      cx -= u / g * gx;\n      cy -= u / g * gy;\n    }\n\n    v1 = cx * cx + cy * cy;\n    cx = c2x - sx;\n    cy = c2y - sy;\n    u = cx * gx + cy * gy;\n\n    if (u > g) {\n      cx -= gx;\n      cy -= gy;\n    } else if (u > 0 && g != 0) {\n      cx -= u / g * gx;\n      cy -= u / g * gy;\n    }\n\n    v2 = cx * cx + cy * cy;\n\n    if (v1 < 0.01 && v2 < 0.01) {\n      this.onLine(sx, sy, ex, ey);\n      return;\n    } // Avoid infinite recursion\n\n\n    if (isNaN(v1) || isNaN(v2)) {\n      throw new Error('Bad input');\n    } // Split curve\n\n\n    var s1x = (c1x + c2x) * 0.5,\n        s1y = (c1y + c2y) * 0.5,\n        l1x = (c1x + sx) * 0.5,\n        l1y = (c1y + sy) * 0.5,\n        l2x = (l1x + s1x) * 0.5,\n        l2y = (l1y + s1y) * 0.5,\n        r2x = (ex + c2x) * 0.5,\n        r2y = (ey + c2y) * 0.5,\n        r1x = (r2x + s1x) * 0.5,\n        r1y = (r2y + s1y) * 0.5,\n        l2r1x = (l2x + r1x) * 0.5,\n        l2r1y = (l2y + r1y) * 0.5; // TODO: Manual stack if necessary. Currently recursive without tail optimization.\n\n    this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);\n    this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);\n  },\n  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {\n    // Inverse Rotation + Scale Transform\n    var rad = rotation ? rotation * Math.PI / 180 : 0,\n        cos = Math.cos(rad),\n        sin = Math.sin(rad),\n        xx = cos * rx,\n        yx = -sin * ry,\n        xy = sin * rx,\n        yy = cos * ry; // Bezier Curve Approximation\n\n    var arc = ea - sa;\n    if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;\n    var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),\n        step = arc / n,\n        k = 4 / 3 * Math.tan(step / 4);\n    var x = Math.cos(sa),\n        y = Math.sin(sa);\n\n    for (var i = 0; i < n; i++) {\n      var cp1x = x - k * y,\n          cp1y = y + k * x;\n      sa += step;\n      x = Math.cos(sa);\n      y = Math.sin(sa);\n      var cp2x = x + k * y,\n          cp2y = y - k * x;\n      this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);\n    }\n  },\n  onClose: function onClose(sx, sy, ex, ey) {\n    this.onLine(sx, sy, ex, ey);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}