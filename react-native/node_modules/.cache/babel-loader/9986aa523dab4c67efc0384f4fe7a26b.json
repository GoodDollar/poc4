{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar colors = {\n  maroon: '#800000',\n  red: '#ff0000',\n  orange: '#ffA500',\n  yellow: '#ffff00',\n  olive: '#808000',\n  purple: '#800080',\n  fuchsia: \"#ff00ff\",\n  white: '#ffffff',\n  lime: '#00ff00',\n  green: '#008000',\n  navy: '#000080',\n  blue: '#0000ff',\n  aqua: '#00ffff',\n  teal: '#008080',\n  black: '#000000',\n  silver: '#c0c0c0',\n  gray: '#808080'\n};\n\nvar map = function map(array, fn) {\n  var results = [];\n\n  for (var i = 0, l = array.length; i < l; i++) {\n    results[i] = fn(array[i], i);\n  }\n\n  return results;\n};\n\nvar Color = function Color(color, type) {\n  if (color.isColor) {\n    this.red = color.red;\n    this.green = color.green;\n    this.blue = color.blue;\n    this.alpha = color.alpha;\n  } else {\n    var namedColor = colors[color];\n\n    if (namedColor) {\n      color = namedColor;\n      type = 'hex';\n    }\n\n    switch (typeof color) {\n      case 'string':\n        if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';\n        break;\n\n      case 'object':\n        type = type || 'rgb';\n        color = color.toString();\n        break;\n\n      case 'number':\n        type = 'hex';\n        color = color.toString(16);\n        break;\n    }\n\n    color = Color['parse' + type.toUpperCase()](color);\n    this.red = color[0];\n    this.green = color[1];\n    this.blue = color[2];\n    this.alpha = color[3];\n  }\n\n  this.isColor = true;\n};\n\nvar limit = function limit(number, min, max) {\n  return Math.min(max, Math.max(min, number));\n};\n\nvar listMatch = /([-.\\d]+\\%?)\\s*,\\s*([-.\\d]+\\%?)\\s*,\\s*([-.\\d]+\\%?)\\s*,?\\s*([-.\\d]*\\%?)/;\nvar hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;\n\nColor.parseRGB = function (color) {\n  return map(color.match(listMatch).slice(1), function (bit, i) {\n    if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);\n    return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);\n  });\n};\n\nColor.parseHEX = function (color) {\n  if (color.length == 1) color = color + color + color;\n  return map(color.match(hexMatch).slice(1), function (bit, i) {\n    if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;\n    return parseInt(bit.length == 1 ? bit + bit : bit, 16);\n  });\n};\n\nColor.parseHSB = function (color) {\n  var hsb = map(color.match(listMatch).slice(1), function (bit, i) {\n    if (bit) bit = parseFloat(bit);\n    if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);\n  });\n  var a = hsb[3];\n  var br = Math.round(hsb[2] / 100 * 255);\n  if (hsb[1] == 0) return [br, br, br, a];\n  var hue = hsb[0];\n  var f = hue % 60;\n  var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);\n  var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);\n  var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);\n\n  switch (Math.floor(hue / 60)) {\n    case 0:\n      return [br, t, p, a];\n\n    case 1:\n      return [q, br, p, a];\n\n    case 2:\n      return [p, br, t, a];\n\n    case 3:\n      return [p, q, br, a];\n\n    case 4:\n      return [t, p, br, a];\n\n    default:\n      return [br, p, q, a];\n  }\n};\n\nColor.parseHSL = function (color) {\n  var hsb = map(color.match(listMatch).slice(1), function (bit, i) {\n    if (bit) bit = parseFloat(bit);\n    if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);\n  });\n  var h = hsb[0] / 60;\n  var s = hsb[1] / 100;\n  var l = hsb[2] / 100;\n  var a = hsb[3];\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h % 2 - 1));\n  var m = l - c / 2;\n  var p = Math.round((c + m) * 255);\n  var q = Math.round((x + m) * 255);\n  var t = Math.round(m * 255);\n\n  switch (Math.floor(h)) {\n    case 0:\n      return [p, q, t, a];\n\n    case 1:\n      return [q, p, t, a];\n\n    case 2:\n      return [t, p, q, a];\n\n    case 3:\n      return [t, q, p, a];\n\n    case 4:\n      return [q, t, p, a];\n\n    default:\n      return [p, t, q, a];\n  }\n};\n\nvar toString = function toString(type, array) {\n  if (array[3] != 1) type += 'a';else array.pop();\n  return type + '(' + array.join(', ') + ')';\n};\n\nColor.prototype = {\n  toHSB: function toHSB(array) {\n    var red = this.red,\n        green = this.green,\n        blue = this.blue,\n        alpha = this.alpha;\n    var max = Math.max(red, green, blue),\n        min = Math.min(red, green, blue),\n        delta = max - min;\n    var hue = 0,\n        saturation = delta != 0 ? delta / max : 0,\n        brightness = max / 255;\n\n    if (saturation) {\n      var rr = (max - red) / delta,\n          gr = (max - green) / delta,\n          br = (max - blue) / delta;\n      hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;\n      if ((hue /= 6) < 0) hue++;\n    }\n\n    var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];\n    return array ? hsb : toString('hsb', hsb);\n  },\n  toHSL: function toHSL(array) {\n    var red = this.red,\n        green = this.green,\n        blue = this.blue,\n        alpha = this.alpha;\n    var max = Math.max(red, green, blue),\n        min = Math.min(red, green, blue),\n        delta = max - min;\n    var hue = 0,\n        saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,\n        lightness = (max + min) / 512;\n\n    if (saturation) {\n      var rr = (max - red) / delta,\n          gr = (max - green) / delta,\n          br = (max - blue) / delta;\n      hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;\n      if ((hue /= 6) < 0) hue++;\n    }\n\n    var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];\n    return array ? hsl : toString('hsl', hsl);\n  },\n  toHEX: function toHEX(array) {\n    var a = this.alpha;\n    var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;\n    var hex = map([this.red, this.green, this.blue], function (bit) {\n      bit = bit.toString(16);\n      return bit.length == 1 ? '0' + bit : bit;\n    });\n    return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);\n  },\n  toRGB: function toRGB(array) {\n    var rgb = [this.red, this.green, this.blue, this.alpha];\n    return array ? rgb : toString('rgb', rgb);\n  }\n};\nColor.prototype.toString = Color.prototype.toRGB;\n\nColor.hex = function (hex) {\n  return new Color(hex, 'hex');\n};\n\nif (this.hex == null) this.hex = Color.hex;\n\nColor.hsb = function (h, s, b, a) {\n  return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');\n};\n\nif (this.hsb == null) this.hsb = Color.hsb;\n\nColor.hsl = function (h, s, l, a) {\n  return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');\n};\n\nif (this.hsl == null) this.hsl = Color.hsl;\n\nColor.rgb = function (r, g, b, a) {\n  return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');\n};\n\nif (this.rgb == null) this.rgb = Color.rgb;\n\nColor.detach = function (color) {\n  color = new Color(color);\n  return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];\n};\n\nmodule.exports = Color;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(colors, \"colors\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(map, \"map\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(Color, \"Color\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(limit, \"limit\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(listMatch, \"listMatch\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(hexMatch, \"hexMatch\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n  reactHotLoader.register(toString, \"toString\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\core\\\\color.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}