{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport invariant from 'fbjs/lib/invariant';\nimport NativeModules from '../../../exports/NativeModules';\nimport NativeEventEmitter from '../NativeEventEmitter';\nvar NativeAnimatedModule = NativeModules.NativeAnimatedModule;\nvar __nativeAnimatedNodeTagCount = 1;\n/* used for animated nodes */\n\nvar __nativeAnimationIdCount = 1;\n/* used for started animations */\n\nvar nativeEventEmitter = void 0;\n/**\n * Simple wrappers around NativeAnimatedModule to provide flow and autocmplete support for\n * the native module methods\n */\n\nvar API = {\n  createAnimatedNode: function createAnimatedNode(tag, config) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.createAnimatedNode(tag, config);\n  },\n  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);\n  },\n  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);\n  },\n  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);\n  },\n  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);\n  },\n  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);\n  },\n  stopAnimation: function stopAnimation(animationId) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.stopAnimation(animationId);\n  },\n  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);\n  },\n  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);\n  },\n  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);\n  },\n  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);\n  },\n  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);\n  },\n  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);\n  },\n  dropAnimatedNode: function dropAnimatedNode(tag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.dropAnimatedNode(tag);\n  },\n  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);\n  },\n  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {\n    assertNativeAnimatedModule();\n    NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);\n  }\n};\n/**\n * Styles allowed by the native animated implementation.\n *\n * In general native animated implementation should support any numeric property that doesn't need\n * to be updated through the shadow view hierarchy (all non-layout properties).\n */\n\nvar STYLES_WHITELIST = {\n  opacity: true,\n  transform: true,\n\n  /* ios styles */\n  shadowOpacity: true,\n  shadowRadius: true,\n\n  /* legacy android transform properties */\n  scaleX: true,\n  scaleY: true,\n  translateX: true,\n  translateY: true\n};\nvar TRANSFORM_WHITELIST = {\n  translateX: true,\n  translateY: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true,\n  rotateX: true,\n  rotateY: true,\n  perspective: true\n};\nvar SUPPORTED_INTERPOLATION_PARAMS = {\n  inputRange: true,\n  outputRange: true,\n  extrapolate: true,\n  extrapolateRight: true,\n  extrapolateLeft: true\n};\n\nfunction addWhitelistedStyleProp(prop) {\n  STYLES_WHITELIST[prop] = true;\n}\n\nfunction addWhitelistedTransformProp(prop) {\n  TRANSFORM_WHITELIST[prop] = true;\n}\n\nfunction addWhitelistedInterpolationParam(param) {\n  SUPPORTED_INTERPOLATION_PARAMS[param] = true;\n}\n\nfunction validateTransform(configs) {\n  configs.forEach(function (config) {\n    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {\n      throw new Error('Property \\'' + config.property + '\\' is not supported by native animated module');\n    }\n  });\n}\n\nfunction validateStyles(styles) {\n  for (var key in styles) {\n    if (!STYLES_WHITELIST.hasOwnProperty(key)) {\n      throw new Error('Style property \\'' + key + '\\' is not supported by native animated module');\n    }\n  }\n}\n\nfunction validateInterpolation(config) {\n  for (var key in config) {\n    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {\n      throw new Error('Interpolation property \\'' + key + '\\' is not supported by native animated module');\n    }\n  }\n}\n\nfunction generateNewNodeTag() {\n  return __nativeAnimatedNodeTagCount++;\n}\n\nfunction generateNewAnimationId() {\n  return __nativeAnimationIdCount++;\n}\n\nfunction assertNativeAnimatedModule() {\n  invariant(NativeAnimatedModule, 'Native animated module is not available');\n}\n\nvar _warnedMissingNativeAnimated = false;\n\nfunction shouldUseNativeDriver(config) {\n  if (config.useNativeDriver && !NativeAnimatedModule) {\n    if (!_warnedMissingNativeAnimated) {\n      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');\n      _warnedMissingNativeAnimated = true;\n    }\n\n    return false;\n  }\n\n  return config.useNativeDriver || false;\n}\n\nvar NativeAnimatedHelper = {\n  API: API,\n  addWhitelistedStyleProp: addWhitelistedStyleProp,\n  addWhitelistedTransformProp: addWhitelistedTransformProp,\n  addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,\n  validateStyles: validateStyles,\n  validateTransform: validateTransform,\n  validateInterpolation: validateInterpolation,\n  generateNewNodeTag: generateNewNodeTag,\n  generateNewAnimationId: generateNewAnimationId,\n  assertNativeAnimatedModule: assertNativeAnimatedModule,\n  shouldUseNativeDriver: shouldUseNativeDriver,\n\n  get nativeEventEmitter() {\n    if (!nativeEventEmitter) {\n      nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);\n    }\n\n    return nativeEventEmitter;\n  }\n\n};\nexport { API, addWhitelistedStyleProp, addWhitelistedTransformProp, addWhitelistedInterpolationParam, validateStyles, validateTransform, validateInterpolation, generateNewNodeTag, generateNewAnimationId, assertNativeAnimatedModule, shouldUseNativeDriver };\nvar _default = NativeAnimatedHelper;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(NativeAnimatedModule, \"NativeAnimatedModule\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(__nativeAnimatedNodeTagCount, \"__nativeAnimatedNodeTagCount\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(__nativeAnimationIdCount, \"__nativeAnimationIdCount\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(nativeEventEmitter, \"nativeEventEmitter\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(API, \"API\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(STYLES_WHITELIST, \"STYLES_WHITELIST\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(TRANSFORM_WHITELIST, \"TRANSFORM_WHITELIST\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(SUPPORTED_INTERPOLATION_PARAMS, \"SUPPORTED_INTERPOLATION_PARAMS\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(addWhitelistedStyleProp, \"addWhitelistedStyleProp\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(addWhitelistedTransformProp, \"addWhitelistedTransformProp\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(addWhitelistedInterpolationParam, \"addWhitelistedInterpolationParam\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(validateTransform, \"validateTransform\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(validateStyles, \"validateStyles\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(validateInterpolation, \"validateInterpolation\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(generateNewNodeTag, \"generateNewNodeTag\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(generateNewAnimationId, \"generateNewAnimationId\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(assertNativeAnimatedModule, \"assertNativeAnimatedModule\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(_warnedMissingNativeAnimated, \"_warnedMissingNativeAnimated\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(shouldUseNativeDriver, \"shouldUseNativeDriver\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(NativeAnimatedHelper, \"NativeAnimatedHelper\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\NativeAnimatedHelper.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}