{"ast":null,"code":"var Class = require('../../core/class');\n\nvar Base = require('./base');\n\nvar Path = require('./path');\n\nmodule.exports = Class(Base, {\n  base_initialize: Base.prototype.initialize,\n  initialize: function initialize(path, width, height) {\n    this.base_initialize();\n    this.width = width;\n    this.height = height;\n    if (path != null) this.draw(path);\n  },\n  draw: function draw(path, width, height) {\n    if (!(path instanceof Path)) path = new Path(path);\n    this.path = path;\n    this._commands = path.toCommands();\n    if (width != null) this.width = width;\n    if (height != null) this.height = height;\n    return this.invalidate();\n  },\n  localHitTest: function localHitTest(x, y) {\n    if (!this._fill) return null;\n\n    if (this.width == null || this.height == null) {\n      var context = Base._genericContext,\n          commands = this._commands;\n      if (!commands) return null;\n      context.beginPath();\n\n      for (var i = 0, l = commands.length; i < l; i++) {\n        commands[i](context);\n      }\n\n      return context.isPointInPath(x, y) ? this : null;\n    }\n\n    if (x > 0 && y > 0 && x < this.width && y < this.height) {\n      return this;\n    }\n\n    return null;\n  },\n  renderShapeTo: function renderShapeTo(context) {\n    if (this._invisible || !this._commands || !this._fill && !this._stroke) {\n      return null;\n    }\n\n    context.transform(this.xx, this.yx, this.xy, this.yy, this.x, this.y);\n    var commands = this._commands,\n        fill = this._fill,\n        stroke = this._stroke,\n        dash = this._strokeDash;\n    context.beginPath();\n\n    if (dash) {\n      if (context.setLineDash) {\n        context.setLineDash(dash);\n      } else {\n        // TODO: Remove when FF supports setLineDash.\n        context.mozDash = dash;\n      } // TODO: Create fallback to other browsers.\n\n    } else {\n      if (context.setLineDash) {\n        context.setLineDash([]);\n      } else {\n        context.mozDash = null;\n      }\n    }\n\n    for (var i = 0, l = commands.length; i < l; i++) {\n      commands[i](context);\n    }\n\n    if (fill) {\n      var m = this._fillTransform;\n\n      if (m) {\n        context.save(); // TODO: Optimize away this by restoring the transform before stroking\n\n        context.transform(m.xx, m.yx, m.xy, m.yy, m.x, m.y);\n        context.fillStyle = fill;\n        context.fill();\n        context.restore();\n      } else {\n        context.fillStyle = fill;\n        context.fill();\n      }\n    }\n\n    if (stroke) {\n      context.strokeStyle = stroke;\n      context.lineWidth = this._strokeWidth;\n      context.lineCap = this._strokeCap;\n      context.lineJoin = this._strokeJoin;\n      context.stroke();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}