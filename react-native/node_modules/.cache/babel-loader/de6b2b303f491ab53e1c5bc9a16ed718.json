{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n * @format\n */\n'use strict';\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport AnimatedValue from './nodes/AnimatedValue';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport findNodeHandle from '../../../exports/findNodeHandle';\nimport invariant from 'fbjs/lib/invariant';\nvar shouldUseNativeDriver = NativeAnimatedHelper.shouldUseNativeDriver;\n\nfunction attachNativeEvent(viewRef, eventName, argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  var eventMappings = [];\n\n  var traverse = function traverse(value, path) {\n    if (value instanceof AnimatedValue) {\n      value.__makeNative();\n\n      eventMappings.push({\n        nativeEventPath: path,\n        animatedValueTag: value.__getNativeTag()\n      });\n    } else if (typeof value === 'object') {\n      for (var _key in value) {\n        traverse(value[_key], path.concat(_key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.'); // Assume that the event containing `nativeEvent` is always the first argument.\n\n  traverse(argMapping[0].nativeEvent, []);\n  var viewTag = findNodeHandle(viewRef);\n  eventMappings.forEach(function (mapping) {\n    NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);\n  });\n  return {\n    detach: function detach() {\n      eventMappings.forEach(function (mapping) {\n        NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);\n      });\n    }\n  };\n}\n\nvar AnimatedEvent = function () {\n  function AnimatedEvent(argMapping) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AnimatedEvent);\n\n    this._listeners = [];\n    this._argMapping = argMapping;\n\n    if (config.listener) {\n      this.__addListener(config.listener);\n    }\n\n    this._callListeners = this._callListeners.bind(this);\n    this._attachedEvent = null;\n    this.__isNative = shouldUseNativeDriver(config);\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._validateMapping();\n    }\n  }\n\n  AnimatedEvent.prototype.__addListener = function __addListener(callback) {\n    this._listeners.push(callback);\n  };\n\n  AnimatedEvent.prototype.__removeListener = function __removeListener(callback) {\n    this._listeners = this._listeners.filter(function (listener) {\n      return listener !== callback;\n    });\n  };\n\n  AnimatedEvent.prototype.__attach = function __attach(viewRef, eventName) {\n    invariant(this.__isNative, 'Only native driven events need to be attached.');\n    this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);\n  };\n\n  AnimatedEvent.prototype.__detach = function __detach(viewTag, eventName) {\n    invariant(this.__isNative, 'Only native driven events need to be detached.');\n    this._attachedEvent && this._attachedEvent.detach();\n  };\n\n  AnimatedEvent.prototype.__getHandler = function __getHandler() {\n    var _this = this;\n\n    if (this.__isNative) {\n      return this._callListeners;\n    }\n\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var traverse = function traverse(recMapping, recEvt, key) {\n        if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {\n          recMapping.setValue(recEvt);\n        } else if (typeof recMapping === 'object') {\n          for (var mappingKey in recMapping) {\n            /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n             * comment suppresses an error when upgrading Flow's support for\n             * React. To see the error delete this comment and run Flow. */\n            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n          }\n        }\n      };\n\n      if (!_this.__isNative) {\n        _this._argMapping.forEach(function (mapping, idx) {\n          traverse(mapping, args[idx], 'arg' + idx);\n        });\n      }\n\n      _this._callListeners.apply(_this, args);\n    };\n  };\n\n  AnimatedEvent.prototype._callListeners = function _callListeners() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._listeners.forEach(function (listener) {\n      return listener.apply(undefined, args);\n    });\n  };\n\n  AnimatedEvent.prototype._validateMapping = function _validateMapping() {\n    var traverse = function traverse(recMapping, recEvt, key) {\n      if (typeof recEvt === 'number') {\n        invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');\n        return;\n      }\n\n      invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);\n      invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);\n\n      for (var mappingKey in recMapping) {\n        traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);\n      }\n    };\n  };\n\n  return AnimatedEvent;\n}();\n\nexport { AnimatedEvent, attachNativeEvent };\nvar _default = {\n  AnimatedEvent: AnimatedEvent,\n  attachNativeEvent: attachNativeEvent\n};\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_classCallCheck, \"_classCallCheck\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\AnimatedEvent.js\");\n  reactHotLoader.register(shouldUseNativeDriver, \"shouldUseNativeDriver\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\AnimatedEvent.js\");\n  reactHotLoader.register(attachNativeEvent, \"attachNativeEvent\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\AnimatedEvent.js\");\n  reactHotLoader.register(AnimatedEvent, \"AnimatedEvent\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\AnimatedEvent.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\Animated\\\\AnimatedEvent.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}