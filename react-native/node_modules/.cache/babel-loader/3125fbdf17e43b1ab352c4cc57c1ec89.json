{"ast":null,"code":"var Class = require('../core/class');\n\nmodule.exports = Class({\n  // placement\n  _resetPlacement: function _resetPlacement() {\n    var container = this.parentNode;\n\n    if (container) {\n      var previous = this.previousSibling,\n          next = this.nextSibling;\n\n      if (previous) {\n        previous.nextSibling = next;\n      } else {\n        container.firstChild = next;\n      }\n\n      if (next) {\n        next.previousSibling = previous;\n      } else {\n        container.lastChild = this.previousSibling;\n      }\n    }\n\n    this.previousSibling = null;\n    this.nextSibling = null;\n    this.parentNode = null;\n    return this;\n  },\n  inject: function inject(container) {\n    this._resetPlacement();\n\n    var last = container.lastChild;\n\n    if (last) {\n      last.nextSibling = this;\n      this.previousSibling = last;\n    } else {\n      container.firstChild = this;\n    }\n\n    container.lastChild = this;\n    this.parentNode = container;\n\n    this._place();\n\n    return this;\n  },\n  injectBefore: function injectBefore(sibling) {\n    this._resetPlacement();\n\n    var container = sibling.parentNode;\n    if (!container) return this;\n    var previous = sibling.previousSibling;\n\n    if (previous) {\n      previous.nextSibling = this;\n      this.previousSibling = previous;\n    } else {\n      container.firstChild = this;\n    }\n\n    sibling.previousSibling = this;\n    this.nextSibling = sibling;\n    this.parentNode = container;\n\n    this._place();\n\n    return this;\n  },\n  eject: function eject() {\n    this._resetPlacement();\n\n    this._place();\n\n    return this;\n  },\n  _place: function _place() {},\n  // events\n  dispatch: function dispatch(event) {\n    var events = this._events,\n        listeners = events && events[event.type];\n\n    if (listeners) {\n      listeners = listeners.slice(0);\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        var fn = listeners[i],\n            result;\n        if (typeof fn == 'function') result = fn.call(this, event);else result = fn.handleEvent(event);\n        if (result === false) event.preventDefault();\n      }\n    }\n\n    if (this.parentNode && this.parentNode.dispatch) {\n      this.parentNode.dispatch(event);\n    }\n  },\n  subscribe: function subscribe(type, fn, bind) {\n    if (typeof type != 'string') {\n      // listen type / fn with object\n      var subscriptions = [];\n\n      for (var t in type) {\n        subscriptions.push(this.subscribe(t, type[t]));\n      }\n\n      return function () {\n        // unsubscribe\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          subscriptions[i]();\n        }\n\n        return this;\n      };\n    } else {\n      // listen to one\n      var bound = typeof fn === 'function' ? fn.bind(bind || this) : fn,\n          events = this._events || (this._events = {}),\n          listeners = events[type] || (events[type] = []);\n      listeners.push(bound);\n      return function () {\n        // unsubscribe\n        for (var i = 0, l = listeners.length; i < l; i++) {\n          if (listeners[i] === bound) {\n            listeners.splice(i, 1);\n            break;\n          }\n        }\n      };\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}