{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n * @format\n */\n\n\nimport UnimplementedView from '../../../modules/UnimplementedView';\nimport React from 'react';\nimport View from '../../../exports/View';\nimport VirtualizedList from '../VirtualizedList';\nimport invariant from 'fbjs/lib/invariant';\nvar defaultProps = Object.assign({}, VirtualizedList.defaultProps, {\n  numColumns: 1\n});\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\n\nvar FlatList = function (_React$PureComponent) {\n  _inherits(FlatList, _React$PureComponent);\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n\n\n  FlatList.prototype.scrollToEnd = function scrollToEnd(params) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  };\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n\n\n  FlatList.prototype.scrollToIndex = function scrollToIndex(params) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  };\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n\n\n  FlatList.prototype.scrollToItem = function scrollToItem(params) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  };\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n\n\n  FlatList.prototype.scrollToOffset = function scrollToOffset(params) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  };\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n\n\n  FlatList.prototype.recordInteraction = function recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  };\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n\n\n  FlatList.prototype.flashScrollIndicators = function flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  };\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n\n\n  FlatList.prototype.getScrollResponder = function getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  };\n\n  FlatList.prototype.getScrollableNode = function getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  };\n\n  FlatList.prototype.setNativeProps = function setNativeProps(props) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  };\n\n  FlatList.prototype.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {\n    this._checkProps(this.props);\n  };\n\n  FlatList.prototype.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');\n    invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');\n    invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');\n    invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');\n\n    this._checkProps(nextProps);\n  };\n\n  function FlatList(props) {\n    _classCallCheck(this, FlatList);\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));\n\n    _this._hasWarnedLegacy = false;\n    _this._virtualizedListPairs = [];\n\n    _this._captureRef = function (ref) {\n      _this._listRef = ref;\n    };\n\n    _this._getItem = function (data, index) {\n      var numColumns = _this.props.numColumns;\n\n      if (numColumns > 1) {\n        var ret = [];\n\n        for (var kk = 0; kk < numColumns; kk++) {\n          var _item = data[index * numColumns + kk];\n          _item && ret.push(_item);\n        }\n\n        return ret;\n      } else {\n        return data[index];\n      }\n    };\n\n    _this._getItemCount = function (data) {\n      return data ? Math.ceil(data.length / _this.props.numColumns) : 0;\n    };\n\n    _this._keyExtractor = function (items, index) {\n      var _this$props = _this.props,\n          keyExtractor = _this$props.keyExtractor,\n          numColumns = _this$props.numColumns;\n\n      if (numColumns > 1) {\n        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);\n        return items.map(function (it, kk) {\n          return keyExtractor(it, index * numColumns + kk);\n        }).join(':');\n      } else {\n        /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.63 was deployed. To see the error delete this\n         * comment and run Flow. */\n        return keyExtractor(items, index);\n      }\n    };\n\n    _this._renderItem = function (info) {\n      var _this$props2 = _this.props,\n          renderItem = _this$props2.renderItem,\n          numColumns = _this$props2.numColumns,\n          columnWrapperStyle = _this$props2.columnWrapperStyle;\n\n      if (numColumns > 1) {\n        var _item2 = info.item,\n            _index = info.index;\n        invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');\n        return React.createElement(View, {\n          style: [{\n            flexDirection: 'row'\n          }, columnWrapperStyle]\n        }, _item2.map(function (it, kk) {\n          var element = renderItem({\n            item: it,\n            index: _index * numColumns + kk,\n            separators: info.separators\n          });\n          return element && React.cloneElement(element, {\n            key: kk\n          });\n        }));\n      } else {\n        return renderItem(info);\n      }\n    };\n\n    if (_this.props.viewabilityConfigCallbackPairs) {\n      _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {\n        return {\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)\n        };\n      });\n    } else if (_this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      _this._virtualizedListPairs.push({\n        viewabilityConfig: _this.props.viewabilityConfig,\n        onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)\n      });\n    }\n\n    return _this;\n  }\n\n  FlatList.prototype._checkProps = function _checkProps(props) {\n    var getItem = props.getItem,\n        getItemCount = props.getItemCount,\n        horizontal = props.horizontal,\n        legacyImplementation = props.legacyImplementation,\n        numColumns = props.numColumns,\n        columnWrapperStyle = props.columnWrapperStyle,\n        onViewableItemsChanged = props.onViewableItemsChanged,\n        viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;\n    invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');\n\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');\n    }\n\n    if (legacyImplementation) {\n      invariant(numColumns === 1, 'Legacy list does not support multiple columns.'); // Warning: may not have full feature parity and is meant more for debugging and performance\n      // comparison.\n\n      if (!this._hasWarnedLegacy) {\n        console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');\n        this._hasWarnedLegacy = true;\n      }\n    }\n\n    invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');\n  };\n\n  FlatList.prototype._pushMultiColumnViewable = function _pushMultiColumnViewable(arr, v) {\n    var _props = this.props,\n        numColumns = _props.numColumns,\n        keyExtractor = _props.keyExtractor;\n    v.item.forEach(function (item, ii) {\n      invariant(v.index != null, 'Missing index!');\n      var index = v.index * numColumns + ii;\n      arr.push(Object.assign({}, v, {\n        item: item,\n        key: keyExtractor(item, index),\n        index: index\n      }));\n    });\n  };\n\n  FlatList.prototype._createOnViewableItemsChanged = function _createOnViewableItemsChanged(onViewableItemsChanged) {\n    var _this2 = this;\n\n    return function (info) {\n      var numColumns = _this2.props.numColumns;\n\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          var _changed = [];\n          var _viewableItems = [];\n          info.viewableItems.forEach(function (v) {\n            return _this2._pushMultiColumnViewable(_viewableItems, v);\n          });\n          info.changed.forEach(function (v) {\n            return _this2._pushMultiColumnViewable(_changed, v);\n          });\n          onViewableItemsChanged({\n            viewableItems: _viewableItems,\n            changed: _changed\n          });\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  };\n\n  FlatList.prototype.render = function render() {\n    if (this.props.legacyImplementation) {\n      return (\n        /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses an\n         * error found when Flow v0.66 was deployed. To see the error delete\n         * this comment and run Flow. */\n        React.createElement(UnimplementedView, _extends({}, this.props, {\n          /* $FlowFixMe(>=0.66.0 site=react_native_fb) This comment suppresses\n           * an error found when Flow v0.66 was deployed. To see the error\n           * delete this comment and run Flow. */\n          items: this.props.data,\n          ref: this._captureRef\n        }))\n      );\n    } else {\n      return React.createElement(VirtualizedList, _extends({}, this.props, {\n        renderItem: this._renderItem,\n        getItem: this._getItem,\n        getItemCount: this._getItemCount,\n        keyExtractor: this._keyExtractor,\n        ref: this._captureRef,\n        viewabilityConfigCallbackPairs: this._virtualizedListPairs\n      }));\n    }\n  };\n\n  return FlatList;\n}(React.PureComponent);\n\nFlatList.defaultProps = defaultProps;\nvar _default = FlatList;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_extends, \"_extends\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(_classCallCheck, \"_classCallCheck\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(_possibleConstructorReturn, \"_possibleConstructorReturn\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(_inherits, \"_inherits\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(defaultProps, \"defaultProps\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(FlatList, \"FlatList\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-native\\\\FlatList\\\\index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}