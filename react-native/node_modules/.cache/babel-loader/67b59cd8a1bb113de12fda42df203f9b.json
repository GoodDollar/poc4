{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar Class = require('../../core/class');\n\nvar Base = require('./base');\n\nvar Path = require('./path');\n\nvar Surface = require('./surface');\n\nvar Group = require('./group');\n\nvar DOM = require('./dom');\n\nvar fontAnchors = {\n  start: 'left',\n  middle: 'center',\n  end: 'right'\n};\nmodule.exports = Class(Base, {\n  base_initialize: Base.prototype.initialize,\n  initialize: function initialize(text, font, alignment, path) {\n    this.base_initialize('shape');\n    var p = this.pathElement = DOM.createElement('path');\n    p.textpathok = true;\n    this.element.appendChild(p);\n    p = this.textPathElement = DOM.createElement(\"textpath\");\n    p.on = true;\n    p.style['v-text-align'] = 'left';\n    this.element.appendChild(p);\n    this.draw.apply(this, arguments);\n  },\n  draw: function draw(text, font, alignment, path) {\n    var element = this.element,\n        textPath = this.textPathElement,\n        style = textPath.style;\n    textPath.string = text;\n\n    if (font) {\n      if (typeof font == 'string') {\n        style.font = font;\n      } else {\n        for (var key in font) {\n          var ckey = key.camelCase ? key.camelCase() : key;\n          if (ckey == 'fontFamily') style[ckey] = \"'\" + font[key] + \"'\"; // NOT UNIVERSALLY SUPPORTED OPTIONS\n          // else if (ckey == 'kerning') style['v-text-kern'] = !!font[key];\n          // else if (ckey == 'rotateGlyphs') style['v-rotate-letters'] = !!font[key];\n          // else if (ckey == 'letterSpacing') style['v-text-spacing'] = Number(font[key]) + '';\n          else style[ckey] = font[key];\n        }\n      }\n    }\n\n    if (alignment) style['v-text-align'] = fontAnchors[alignment] || alignment;\n\n    if (path) {\n      this.currentPath = path = new Path(path);\n      this.element.path = path.toVML();\n    } else if (!this.currentPath) {\n      var i = -1,\n          offsetRows = '\\n';\n\n      while ((i = text.indexOf('\\n', i + 1)) > -1) {\n        offsetRows += '\\n';\n      }\n\n      textPath.string = offsetRows + textPath.string;\n      this.element.path = 'm0,0l1,0';\n    } // Measuring the bounding box is currently necessary for gradients etc.\n    // Clone element because the element is dead once it has been in the DOM\n\n\n    element = element.cloneNode(true);\n    style = element.style; // Reset coordinates while measuring\n\n    element.coordorigin = '0,0';\n    element.coordsize = '10000,10000';\n    style.left = '0px';\n    style.top = '0px';\n    style.width = '10000px';\n    style.height = '10000px';\n    style.rotation = 0;\n    element.removeChild(element.firstChild); // Remove skew\n    // Inject the clone into the document\n\n    var canvas = new Surface(1, 1),\n        group = new Group(),\n        // Wrapping it in a group seems to alleviate some client rect weirdness\n    body = element.ownerDocument.body;\n    canvas.inject(body);\n    group.element.appendChild(element);\n    group.inject(canvas);\n    var ebb = element.getBoundingClientRect(),\n        cbb = canvas.toElement().getBoundingClientRect();\n    canvas.eject();\n    this.left = ebb.left - cbb.left;\n    this.top = ebb.top - cbb.top;\n    this.width = ebb.right - ebb.left;\n    this.height = ebb.bottom - ebb.top;\n    this.right = ebb.right - cbb.left;\n    this.bottom = ebb.bottom - cbb.top;\n\n    this._transform(); //this._size = { left: this.left, top: this.top, width: this.width, height: this.height};\n\n\n    return this;\n  }\n});\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(fontAnchors, \"fontAnchors\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\vml\\\\text.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}