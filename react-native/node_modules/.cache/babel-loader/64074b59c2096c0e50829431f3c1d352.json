{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar Class = require('../../core/class');\n\nvar Color = require('../../core/color');\n\nvar Transform = require('../../core/transform');\n\nvar Node = require('./node');\n\nvar genericCanvas = typeof document !== 'undefined' && document.createElement('canvas'),\n    genericContext = genericCanvas && genericCanvas.getContext && genericCanvas.getContext('2d');\n\nfunction recolorImage(img, color1, color2) {\n  // TODO: Fix this experimental implementation\n  color1 = Color.detach(color1);\n  color2 = Color.detach(color2);\n  var canvas = document.createElement('canvas'),\n      context = canvas.getContext('2d');\n  canvas.width = img.width;\n  canvas.height = img.height;\n  context.fillStyle = color2[0];\n  context.fillRect(0, 0, img.width, img.height);\n  context.globalCompositeOperation = 'lighter';\n  context.drawImage(img, 0, 0);\n  return canvas;\n}\n\nvar Base = Class(Node, {\n  initialize: function initialize() {\n    this._fill = null;\n    this._pendingFill = null;\n    this._fillTransform = null;\n    this._stroke = null;\n    this._strokeCap = null;\n    this._strokeDash = null;\n    this._strokeJoin = null;\n    this._strokeWidth = null;\n  },\n\n  /* styles */\n  _addColors: function _addColors(gradient, stops) {\n    // Enumerate stops, assumes offsets are enumerated in order\n    // TODO: Sort. Chrome doesn't always enumerate in expected order but requires stops to be specified in order.\n    if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++) {\n      gradient.addColorStop(i / l, new Color(stops[i]).toString());\n    } else for (var offset in stops) {\n      gradient.addColorStop(offset, new Color(stops[offset]).toString());\n    }\n    return gradient;\n  },\n  fill: function fill(color) {\n    if (arguments.length > 1) return this.fillLinear(arguments);\n    if (this._pendingFill) this._pendingFill();\n    this._fill = color ? new Color(color).toString() : null;\n    return this.invalidate();\n  },\n  fillRadial: function fillRadial(stops, focusX, focusY, radiusX, radiusY, centerX, centerY) {\n    if (focusX == null) focusX = (this.left || 0) + (this.width || 0) * 0.5;\n    if (focusY == null) focusY = (this.top || 0) + (this.height || 0) * 0.5;\n    if (radiusY == null) radiusY = radiusX || this.height * 0.5 || 0;\n    if (radiusX == null) radiusX = (this.width || 0) * 0.5;\n    if (centerX == null) centerX = focusX;\n    if (centerY == null) centerY = focusY;\n    centerX += centerX - focusX;\n    centerY += centerY - focusY;\n    if (radiusX === 0 || radiusX === '0') return this.fillLinear(stops);\n    var ys = radiusY / radiusX;\n    if (this._pendingFill) this._pendingFill();\n    var gradient = genericContext.createRadialGradient(focusX, focusY / ys, 0, centerX, centerY / ys, radiusX * 2); // Double fill radius to simulate repeating gradient\n\n    if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++) {\n      gradient.addColorStop(i / l / 2, new Color(stops[i]).toString());\n      gradient.addColorStop(1 - i / l / 2, new Color(stops[i]).toString());\n    } else for (var offset in stops) {\n      gradient.addColorStop(offset / 2, new Color(stops[offset]).toString());\n      gradient.addColorStop(1 - offset / 2, new Color(stops[offset]).toString());\n    }\n    this._fill = gradient;\n    this._fillTransform = new Transform(1, 0, 0, ys);\n    return this.invalidate();\n  },\n  fillLinear: function fillLinear(stops, x1, y1, x2, y2) {\n    if (arguments.length < 5) {\n      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;\n      var x = Math.cos(angle),\n          y = -Math.sin(angle),\n          l = (Math.abs(x) + Math.abs(y)) / 2,\n          w = this.width || 1,\n          h = this.height || 1;\n      x *= l;\n      y *= l;\n      x1 = 0.5 - x;\n      x2 = 0.5 + x;\n      y1 = 0.5 - y;\n      y2 = 0.5 + y;\n      this._fillTransform = new Transform(w, 0, 0, h);\n    } else {\n      this._fillTransform = null;\n    }\n\n    if (this._pendingFill) this._pendingFill();\n    var gradient = genericContext.createLinearGradient(x1, y1, x2, y2);\n\n    this._addColors(gradient, stops);\n\n    this._fill = gradient;\n    return this.invalidate();\n  },\n  fillImage: function fillImage(url, width, height, left, top, color1, color2) {\n    if (this._pendingFill) this._pendingFill();\n    var img = url;\n\n    if (!(img instanceof Image)) {\n      img = new Image();\n      img.src = url;\n    }\n\n    if (img.width && img.height) {\n      return this._fillImage(img, width, height, left || 0, top || 0, color1, color2);\n    } // Not yet loaded\n\n\n    this._fill = null;\n\n    var self = this,\n        callback = function callback() {\n      cancel();\n\n      self._fillImage(img, width, height, left || 0, top || 0, color1, color2);\n    },\n        cancel = function cancel() {\n      img.removeEventListener('load', callback, false);\n      self._pendingFill = null;\n    };\n\n    this._pendingFill = cancel;\n    img.addEventListener('load', callback, false);\n    return this;\n  },\n  _fillImage: function _fillImage(img, width, height, left, top, color1, color2) {\n    var w = width ? width / img.width : 1,\n        h = height ? height / img.height : 1;\n    if (color1 != null) img = recolorImage(img, color1, color2);\n    this._fill = genericContext.createPattern(img, 'repeat');\n    this._fillTransform = new Transform(w, 0, 0, h, left || 0, top || 0);\n    return this.invalidate();\n  },\n  stroke: function stroke(color, width, cap, join, dash) {\n    this._stroke = color ? new Color(color).toString() : null;\n    this._strokeWidth = width != null ? width : 1;\n    this._strokeCap = cap != null ? cap : 'round';\n    this._strokeJoin = join != null ? join : 'round';\n    this._strokeDash = dash;\n    return this.invalidate();\n  },\n  // Rendering\n  element_renderTo: Node.prototype.renderTo,\n  renderTo: function renderTo(context, xx, yx, xy, yy, x, y) {\n    var opacity = this._opacity;\n\n    if (opacity == null || opacity >= 1) {\n      return this.renderLayerTo(context, xx, yx, xy, yy, x, y);\n    }\n\n    if (this._fill && this._stroke) {\n      return this.element_renderTo(context, xx, yx, xy, yy, x, y);\n    }\n\n    context.globalAlpha = opacity;\n    var r = this.renderLayerTo(context, xx, yx, xy, yy, x, y);\n    context.globalAlpha = 1;\n    return r;\n  },\n  renderLayerTo: function renderLayerTo(context, xx, yx, xy, yy, x, y) {\n    context.setTransform(xx, yx, xy, yy, x, y);\n    this.renderShapeTo(context);\n  }\n});\nBase._genericContext = genericContext;\nmodule.exports = Base;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(genericCanvas, \"genericCanvas\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\canvas\\\\base.js\");\n  reactHotLoader.register(genericContext, \"genericContext\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\canvas\\\\base.js\");\n  reactHotLoader.register(recolorImage, \"recolorImage\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\canvas\\\\base.js\");\n  reactHotLoader.register(Base, \"Base\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\art\\\\modes\\\\canvas\\\\base.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}