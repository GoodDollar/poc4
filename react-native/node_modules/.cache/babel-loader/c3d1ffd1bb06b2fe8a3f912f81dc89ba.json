{"ast":null,"code":"(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\n/* eslint-disable */\n\n/**\n * Copyright 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on React 16.3.0\n */\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar warnValidStyle = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var getComponentName = function getComponentName(instanceOrFiber) {\n    if (typeof instanceOrFiber.getName === 'function') {\n      // Stack reconciler\n      var instance = instanceOrFiber;\n      return instance.getName();\n    }\n\n    if (typeof instanceOrFiber.tag === 'number') {\n      // Fiber reconciler\n      var fiber = instanceOrFiber;\n      var type = fiber.type;\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name;\n      }\n    }\n\n    return null;\n  }; // 'msTransform' is correct, but the other prefixes should be capitalized\n\n\n  var camelizeStyleName = require('fbjs/lib/camelizeStyleName');\n\n  var warning = require('fbjs/lib/warning');\n\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/; // style values shouldn't contain a semicolon\n\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner));\n  };\n\n  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));\n  };\n\n  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(false, \"Style property values shouldn't contain a semicolon.%s \" + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value, owner) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var checkRenderMessage = function checkRenderMessage(owner) {\n    var ownerName;\n\n    if (owner != null) {\n      // Stack passes the owner manually all the way to CSSPropertyOperations.\n      ownerName = getComponentName(owner);\n    } else {// Fiber doesn't pass it but uses ReactDebugCurrentFiber to track it.\n      // It is only enabled in development and tracks host components too.\n      // var {getCurrentFiberOwnerName} = require('ReactDebugCurrentFiber');\n      //  ownerName = getCurrentFiberOwnerName();\n      // TODO: also report the stack.\n    }\n\n    if (ownerName) {\n      return '\\n\\nCheck the render method of `' + ownerName + '`.';\n    }\n\n    return '';\n  };\n\n  warnValidStyle = function warnValidStyle(name, value, component) {\n    var owner;\n\n    if (component) {// TODO: this only works with Stack. Seems like we need to add unit tests?\n      // owner = component._currentElement._owner;\n    }\n\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, owner);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, owner);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, owner);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value, owner);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value, owner);\n      }\n    }\n  };\n}\n\nvar _default = warnValidStyle;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(warnValidStyle, \"warnValidStyle\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(getComponentName, \"getComponentName\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(badVendoredStyleNamePattern, \"badVendoredStyleNamePattern\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(badStyleValueWithSemicolonPattern, \"badStyleValueWithSemicolonPattern\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnedStyleNames, \"warnedStyleNames\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnedStyleValues, \"warnedStyleValues\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnedForNaNValue, \"warnedForNaNValue\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnedForInfinityValue, \"warnedForInfinityValue\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnHyphenatedStyleName, \"warnHyphenatedStyleName\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnBadVendoredStyleName, \"warnBadVendoredStyleName\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnStyleValueWithSemicolon, \"warnStyleValueWithSemicolon\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnStyleValueIsNaN, \"warnStyleValueIsNaN\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(warnStyleValueIsInfinity, \"warnStyleValueIsInfinity\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(checkRenderMessage, \"checkRenderMessage\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"D:\\\\projects\\\\gooddollar\\\\react-native-app\\\\GoodIdentity\\\\node_modules\\\\react-native-web\\\\dist\\\\vendor\\\\react-dom\\\\warnValidStyle\\\\index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}