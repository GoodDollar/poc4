{
  "contractName": "DAOToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x05d2035b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x06fdde03"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x095ea7b3"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x18160ddd"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x23b872dd"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x313ce567"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x355274ea"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0x4000aea0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x42966c68"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x66188463"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x70a08231"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finishMinting",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x7d64bcb4"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "increaseApprovalAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0x90db623f"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x95d89b41"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xa9059cbb"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0xc1d34b89"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0xcae9ca51"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "decreaseApprovalAndCall",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0xcb3993be"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xd73dd623"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xdd62ed3e"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xf2fde38b"
    },
    {
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event",
      "signature": "0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event",
      "signature": "0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event",
      "signature": "0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event",
      "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event",
      "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event",
      "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x40c10f19"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde0314610160578063095ea7b3146101ea57806318160ddd1461020e57806323b872dd14610235578063313ce5671461025f578063355274ea1461028a5780634000aea01461029f57806340c10f19146102fb57806342966c681461031f578063661884631461033957806370a082311461035d5780637d64bcb41461037e5780638da5cb5b1461039357806390db623f146103c457806395d89b4114610420578063a9059cbb14610435578063c1d34b8914610459578063cae9ca51146104bb578063cb3993be14610517578063d73dd62314610573578063dd62ed3e14610597578063f2fde38b146105be575b600080fd5b34801561014357600080fd5b5061014c6105df565b604080519115158252519081900360200190f35b34801561016c57600080fd5b506101756105ef565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061014c600160a060020a036004351660243561067d565b34801561021a57600080fd5b506102236106e3565b60408051918252519081900360200190f35b34801561024157600080fd5b5061014c600160a060020a03600435811690602435166044356106e9565b34801561026b57600080fd5b5061027461084e565b6040805160ff9092168252519081900360200190f35b34801561029657600080fd5b50610223610853565b604080516020600460443581810135601f810184900484028501840190955284845261014c948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108599650505050505050565b34801561030757600080fd5b5061014c600160a060020a0360043516602435610909565b34801561032b57600080fd5b50610337600435610977565b005b34801561034557600080fd5b5061014c600160a060020a0360043516602435610984565b34801561036957600080fd5b50610223600160a060020a0360043516610a74565b34801561038a57600080fd5b5061014c610a8f565b34801561039f57600080fd5b506103a8610b13565b60408051600160a060020a039092168252519081900360200190f35b604080516020600460443581810135601f810184900484028501840190955284845261014c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610b229650505050505050565b34801561042c57600080fd5b50610175610b44565b34801561044157600080fd5b5061014c600160a060020a0360043516602435610b9f565b604080516020601f60643560048181013592830184900484028501840190955281845261014c94600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610c6e9650505050505050565b604080516020600460443581810135601f810184900484028501840190955284845261014c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d209650505050505050565b604080516020600460443581810135601f810184900484028501840190955284845261014c948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610d429650505050505050565b34801561057f57600080fd5b5061014c600160a060020a0360043516602435610d64565b3480156105a357600080fd5b50610223600160a060020a0360043581169060243516610dfd565b3480156105ca57600080fd5b50610337600160a060020a0360043516610e28565b60035460a060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561070057600080fd5b600160a060020a03841660009081526020819052604090205482111561072557600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561075557600080fd5b600160a060020a03841660009081526020819052604090205461077e908363ffffffff610ebd16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546107b3908363ffffffff610ecf16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546107f5908363ffffffff610ebd16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391926000805160206110ca833981519152929181900390910190a35060019392505050565b601281565b60065481565b6000600160a060020a03841630141561087157600080fd5b61087b8484610b9f565b5083600160a060020a0316348360405180828051906020019080838360005b838110156108b257818101518382015260200161089a565b50505050905090810190601f1680156108df5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af19250505015156108ff57600080fd5b5060019392505050565b600354600090600160a060020a0316331461092357600080fd5b60035460a060020a900460ff161561093a57600080fd5b600060065411156109665760065460015461095b908463ffffffff610ecf16565b111561096657600080fd5b6109708383610ee2565b9392505050565b6109813382610fda565b50565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156109d957336000908152600260209081526040808320600160a060020a0388168452909152812055610a0e565b6109e9818463ffffffff610ebd16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090600160a060020a03163314610aa957600080fd5b60035460a060020a900460ff1615610ac057600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6000600160a060020a038416301415610b3a57600080fd5b61087b8484610d64565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106755780601f1061064a57610100808354040283529160200191610675565b6000600160a060020a0383161515610bb657600080fd5b33600090815260208190526040902054821115610bd257600080fd5b33600090815260208190526040902054610bf2908363ffffffff610ebd16565b3360009081526020819052604080822092909255600160a060020a03851681522054610c24908363ffffffff610ecf16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206110ca8339815191529281900390910190a350600192915050565b6000600160a060020a038416301415610c8657600080fd5b610c918585856106e9565b5083600160a060020a0316348360405180828051906020019080838360005b83811015610cc8578181015183820152602001610cb0565b50505050905090810190601f168015610cf55780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610d1557600080fd5b506001949350505050565b6000600160a060020a038416301415610d3857600080fd5b61087b848461067d565b6000600160a060020a038416301415610d5a57600080fd5b61087b8484610984565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d98908363ffffffff610ecf16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610e3f57600080fd5b600160a060020a0381161515610e5457600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610ec957fe5b50900390565b81810182811015610edc57fe5b92915050565b600354600090600160a060020a03163314610efc57600080fd5b60035460a060020a900460ff1615610f1357600080fd5b600154610f26908363ffffffff610ecf16565b600155600160a060020a038316600090815260208190526040902054610f52908363ffffffff610ecf16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206110ca8339815191529181900360200190a350600192915050565b600160a060020a038216600090815260208190526040902054811115610fff57600080fd5b600160a060020a038216600090815260208190526040902054611028908263ffffffff610ebd16565b600160a060020a038316600090815260208190526040902055600154611054908263ffffffff610ebd16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206110ca8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058200c1d066d99840f198c7817ee48fc9dc299886cf89839b80934cc5f47753fcd2d0029",
  "sourceMap": "381:1007:0:-;;;518:35:19;;;-1:-1:-1;;;;;;518:35:19;;;777:138:0;5:2:-1;;;;30:1;27;20:12;5:2;777:138:0;;;;;;;;;;;;;;;;;;;;;;;;;;;501:5:14;:18;;-1:-1:-1;;;;;;501:18:14;509:10;501:18;;;777:138:0;;;847:12;;777:138;;;;;;;847:12;;:4;;:12;;;;;:::i;:::-;-1:-1:-1;870:16:0;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;897:3:0;:10;-1:-1:-1;381:1007:0;;-1:-1:-1;381:1007:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;381:1007:0;;;-1:-1:-1;381:1007:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "381:1007:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;518:35:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;518:35:19;;;;;;;;;;;;;;;;;;;;;;451:18:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;451:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;451:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1803:188:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1803:188:20;-1:-1:-1;;;;;1803:188:20;;;;;;;371:83:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;371:83:15;;;;;;;;;;;;;;;;;;;;736:444:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;736:444:20;-1:-1:-1;;;;;736:444:20;;;;;;;;;;;;546:35:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;546:35:0;;;;;;;;;;;;;;;;;;;;;;;588:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;588:15:0;;;;2140:375:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2140:375:7;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2140:375:7;;-1:-1:-1;2140:375:7;;-1:-1:-1;;;;;;;2140:375:7;1173:212:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1173:212:0;-1:-1:-1;;;;;1173:212:0;;;;;;;353:73:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;353:73:16;;;;;;;3617:403:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3617:403:20;-1:-1:-1;;;;;3617:403:20;;;;;;;1131:99:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1131:99:15;-1:-1:-1;;;;;1131:99:15;;;;;1245:140:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1245:140:19;;;;238:20:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:14;;;;;;;;-1:-1:-1;;;;;238:20:14;;;;;;;;;;;;;;4018:420:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4018:420:7;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4018:420:7;;-1:-1:-1;4018:420:7;;-1:-1:-1;;;;;;;4018:420:7;476:20:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;476:20:0;;;;608:321:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;608:321:15;-1:-1:-1;;;;;608:321:15;;;;;;;2997:404:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2997:404:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2997:404:7;;-1:-1:-1;2997:404:7;;-1:-1:-1;;;;;;;2997:404:7;1306:395;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1306:395:7;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1306:395:7;;-1:-1:-1;1306:395:7;;-1:-1:-1;;;;;;;1306:395:7;5060:430;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5060:430:7;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5060:430:7;;-1:-1:-1;5060:430:7;;-1:-1:-1;;;;;;;5060:430:7;2893:262:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2893:262:20;-1:-1:-1;;;;;2893:262:20;;;;;;;2310:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2310:126:20;-1:-1:-1;;;;;2310:126:20;;;;;;;;;;832:174:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;832:174:14;-1:-1:-1;;;;;832:174:14;;;;;518:35:19;;;-1:-1:-1;;;518:35:19;;;;;:::o;451:18:0:-;;;;;;;;;;;;;;;-1:-1:-1;;451:18:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1803:188:20:-;1890:10;1870:4;1882:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;1882:29:20;;;;;;;;;;;:38;;;1931;;;;;;;1870:4;;1882:29;;1890:10;;1931:38;;;;;;;;-1:-1:-1;1982:4:20;1803:188;;;;:::o;371:83:15:-;437:12;;371:83;:::o;736:444:20:-;818:4;-1:-1:-1;;;;;838:17:20;;;;830:26;;;;;;-1:-1:-1;;;;;880:15:20;;:8;:15;;;;;;;;;;;870:25;;;862:34;;;;;;-1:-1:-1;;;;;920:14:20;;;;;;:7;:14;;;;;;;;935:10;920:26;;;;;;;;910:36;;;902:45;;;;;;-1:-1:-1;;;;;972:15:20;;:8;:15;;;;;;;;;;;:27;;992:6;972:27;:19;:27;:::i;:::-;-1:-1:-1;;;;;954:15:20;;;:8;:15;;;;;;;;;;;:45;;;;1021:13;;;;;;;:25;;1039:6;1021:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;1005:13:20;;;:8;:13;;;;;;;;;;;:41;;;;1081:14;;;;;:7;:14;;;;;1096:10;1081:26;;;;;;;:38;;1112:6;1081:38;:30;:38;:::i;:::-;-1:-1:-1;;;;;1052:14:20;;;;;;;:7;:14;;;;;;;;1067:10;1052:26;;;;;;;;:67;;;;1130:28;;;;;;;;;;;1052:14;;-1:-1:-1;;;;;;;;;;;1130:28:20;;;;;;;;;;-1:-1:-1;1171:4:20;736:444;;;;;:::o;546:35:0:-;579:2;546:35;:::o;588:15::-;;;;:::o;2140:375:7:-;2280:4;-1:-1:-1;;;;;2310:20:7;;2325:4;2310:20;;2302:29;;;;;;2344:27;2359:3;2364:6;2344:14;:27::i;:::-;;2452:3;-1:-1:-1;;;;;2452:8:7;2467:9;2478:5;2452:32;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2452:32:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2444:41;;;;;;;;-1:-1:-1;2503:4:7;2140:375;;;;;:::o;1173:212:0:-;653:5:14;;1251:4:0;;-1:-1:-1;;;;;653:5:14;639:10;:19;631:28;;;;;;593:15:19;;-1:-1:-1;;;593:15:19;;;;592:16;584:25;;;;;;1278:1:0;1272:3;;:7;1268:67;;;1331:3;;1302:12;;:25;;1319:7;1302:25;:16;:25;:::i;:::-;:32;;1294:41;;;;;;1353:24;1364:3;1369:7;1353:10;:24::i;:::-;1346:31;1173:212;-1:-1:-1;;;1173:212:0:o;353:73:16:-;396:25;402:10;414:6;396:5;:25::i;:::-;353:73;:::o;3617:403:20:-;3736:10;3700:4;3728:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3728:29:20;;;;;;;;;;3767:27;;;3763:164;;;3812:10;3836:1;3804:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3804:29:20;;;;;;;;;:33;3763:164;;;3890:30;:8;3903:16;3890:30;:12;:30;:::i;:::-;3866:10;3858:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3858:29:20;;;;;;;;;:62;3763:164;3946:10;3968:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3937:61:20;;3968:29;;;;;;;;;;;3937:61;;;;;;;;;3946:10;3937:61;;;;;;;;;;;-1:-1:-1;4011:4:20;;3617:403;-1:-1:-1;;;3617:403:20:o;1131:99:15:-;-1:-1:-1;;;;;1209:16:15;1187:7;1209:16;;;;;;;;;;;;1131:99::o;1245:140:19:-;653:5:14;;1304:4:19;;-1:-1:-1;;;;;653:5:14;639:10;:19;631:28;;;;;;593:15:19;;-1:-1:-1;;;593:15:19;;;;592:16;584:25;;;;;;1316:15;:22;;-1:-1:-1;;1316:22:19;-1:-1:-1;;;1316:22:19;;;1349:14;;;;1316:22;;1349:14;-1:-1:-1;1376:4:19;1245:140;:::o;238:20:14:-;;;-1:-1:-1;;;;;238:20:14;;:::o;4018:420:7:-;4173:4;-1:-1:-1;;;;;4203:25:7;;4223:4;4203:25;;4195:34;;;;;;4242:45;4265:8;4275:11;4242:22;:45::i;476:20:0:-;;;;;;;;;;;;;;;-1:-1:-1;;476:20:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;608:321:15;671:4;-1:-1:-1;;;;;691:17:15;;;;683:26;;;;;;742:10;733:8;:20;;;;;;;;;;;723:30;;;715:39;;;;;;793:10;784:8;:20;;;;;;;;;;;:32;;809:6;784:32;:24;:32;:::i;:::-;770:10;761:8;:20;;;;;;;;;;;:55;;;;-1:-1:-1;;;;;838:13:15;;;;;;:25;;856:6;838:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;822:13:15;;:8;:13;;;;;;;;;;;;:41;;;;874:33;;;;;;;822:13;;883:10;;-1:-1:-1;;;;;;;;;;;874:33:15;;;;;;;;;-1:-1:-1;920:4:15;608:321;;;;:::o;2997:404:7:-;3155:4;-1:-1:-1;;;;;3185:20:7;;3200:4;3185:20;;3177:29;;;;;;3219:38;3238:5;3245:3;3250:6;3219:18;:38::i;:::-;;3338:3;-1:-1:-1;;;;;3338:8:7;3353:9;3364:5;3338:32;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3338:32:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3330:41;;;;;;;;-1:-1:-1;3389:4:7;2997:404;;;;;;:::o;1306:395::-;1450:4;-1:-1:-1;;;;;1480:25:7;;1500:4;1480:25;;1472:34;;;;;;1519:31;1533:8;1543:6;1519:13;:31::i;5060:430::-;5220:4;-1:-1:-1;;;;;5250:25:7;;5270:4;5250:25;;5242:34;;;;;;5289:50;5312:8;5322:16;5289:22;:50::i;2893:262:20:-;3023:10;2971:4;3015:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3015:29:20;;;;;;;;;;:46;;3049:11;3015:46;:33;:46;:::i;:::-;2991:10;2983:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;2983:29:20;;;;;;;;;;;;:78;;;3072:61;;;;;;2983:29;;3072:61;;;;;;;;;;;-1:-1:-1;3146:4:20;2893:262;;;;:::o;2310:126::-;-1:-1:-1;;;;;2406:15:20;;;2384:7;2406:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;2310:126::o;832:174:14:-;653:5;;-1:-1:-1;;;;;653:5:14;639:10;:19;631:28;;;;;;-1:-1:-1;;;;;908:22:14;;;;900:31;;;;;;963:5;;942:37;;-1:-1:-1;;;;;942:37:14;;;;963:5;;942:37;;963:5;;942:37;985:5;:16;;-1:-1:-1;;985:16:14;-1:-1:-1;;;;;985:16:14;;;;;;;;;;832:174::o;836:110:13:-;894:7;916:6;;;;909:14;;;;-1:-1:-1;936:5:13;;;836:110::o;1008:123::-;1087:5;;;1105:6;;;;1098:14;;;;1008:123;;;;:::o;857:274:19:-;653:5:14;;935:4:19;;-1:-1:-1;;;;;653:5:14;639:10;:19;631:28;;;;;;593:15:19;;-1:-1:-1;;;593:15:19;;;;592:16;584:25;;;;;;962:12;;:25;;979:7;962:25;:16;:25;:::i;:::-;947:12;:40;-1:-1:-1;;;;;1009:13:19;;:8;:13;;;;;;;;;;;:26;;1027:7;1009:26;:17;:26;:::i;:::-;-1:-1:-1;;;;;993:13:19;;:8;:13;;;;;;;;;;;;:42;;;;1046:18;;;;;;;993:13;;1046:18;;;;;;;;;1075:34;;;;;;;;-1:-1:-1;;;;;1075:34:19;;;1092:1;;-1:-1:-1;;;;;;;;;;;1075:34:19;;;;;;;;-1:-1:-1;1122:4:19;857:274;;;;:::o;430:438:16:-;-1:-1:-1;;;;;508:14:16;;:8;:14;;;;;;;;;;;498:24;;;490:33;;;;;;-1:-1:-1;;;;;718:14:16;;:8;:14;;;;;;;;;;;:26;;737:6;718:26;:18;:26;:::i;:::-;-1:-1:-1;;;;;701:14:16;;:8;:14;;;;;;;;;;:43;765:12;;:24;;782:6;765:24;:16;:24;:::i;:::-;750:12;:39;800:18;;;;;;;;-1:-1:-1;;;;;800:18:16;;;;;;;;;;;;;829:34;;;;;;;;852:1;;-1:-1:-1;;;;;829:34:16;;;-1:-1:-1;;;;;;;;;;;829:34:16;;;;;;;;430:438;;:::o",
  "source": "pragma solidity ^0.4.25;\r\n\r\nimport \"openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\";\r\nimport \"openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\";\r\nimport \"../daostack/contracts/token/ERC827/ERC827Token.sol\";\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC827Token,MintableToken,BurnableToken {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solium-disable-next-line uppercase\r\n    uint8 public constant decimals = 18;\r\n    uint public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string _name, string _symbol,uint _cap) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply_.add(_amount) <= cap);\r\n        return super.mint(_to, _amount);\r\n    }\r\n}",
  "sourcePath": "D:/projects/gooddollar/poc4/imports/blockchain/contracts/DAOToken.sol",
  "ast": {
    "absolutePath": "/D/projects/gooddollar/poc4/imports/blockchain/contracts/DAOToken.sol",
    "exportedSymbols": {
      "DAOToken": [
        75
      ]
    },
    "id": 76,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 7265,
        "src": "28:71:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 7095,
        "src": "101:71:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/D/projects/gooddollar/poc4/imports/blockchain/daostack/contracts/token/ERC827/ERC827Token.sol",
        "file": "../daostack/contracts/token/ERC827/ERC827Token.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 3516,
        "src": "174:60:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5,
              "name": "ERC827Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3515,
              "src": "402:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC827Token_$3515",
                "typeString": "contract ERC827Token"
              }
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "402:11:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "MintableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7264,
              "src": "414:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintableToken_$7264",
                "typeString": "contract MintableToken"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "414:13:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 9,
              "name": "BurnableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7094,
              "src": "428:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BurnableToken_$7094",
                "typeString": "contract BurnableToken"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "428:13:0"
          }
        ],
        "contractDependencies": [
          3303,
          3515,
          6927,
          7023,
          7094,
          7137,
          7169,
          7264,
          7510
        ],
        "contractKind": "contract",
        "documentation": "@title DAOToken, base on zeppelin contract.\r\n@dev ERC20 compatible token. It is a mintable, destructible, burnable token.\r",
        "fullyImplemented": true,
        "id": 75,
        "linearizedBaseContracts": [
          75,
          7094,
          7264,
          6927,
          3515,
          7510,
          7023,
          3303,
          7137,
          7169
        ],
        "name": "DAOToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "451:18:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 11,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "451:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 14,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "476:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 13,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "476:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 17,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "546:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 15,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "546:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 16,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "579:2:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 19,
            "name": "cap",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "588:15:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 18,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "588:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 40,
              "nodeType": "Block",
              "src": "836:79:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 28,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "847:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 29,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "854:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "847:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 31,
                  "nodeType": "ExpressionStatement",
                  "src": "847:12:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 32,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "870:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 33,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "879:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "870:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "870:16:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 36,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "897:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 37,
                      "name": "_cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25,
                      "src": "903:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "897:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "897:10:0"
                }
              ]
            },
            "documentation": "@dev Constructor\r\n@param _name - token name\r\n@param _symbol - token symbol\r\n@param _cap - token cap - 0 value means no cap\r",
            "id": 41,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "789:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "803:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "803:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25,
                  "name": "_cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "818:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "818:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "788:40:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "836:0:0"
            },
            "scope": 75,
            "src": "777:138:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 73,
              "nodeType": "Block",
              "src": "1257:128:0",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 54,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "1272:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 55,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1278:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1272:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 66,
                  "nodeType": "IfStatement",
                  "src": "1268:67:0",
                  "trueBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 63,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 60,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45,
                                "src": "1319:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 58,
                                "name": "totalSupply_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 6942,
                                "src": "1302:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 59,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 6870,
                              "src": "1302:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1302:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 62,
                            "name": "cap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "1331:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1302:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 57,
                        "name": "require",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          7528,
                          7529
                        ],
                        "referencedDeclaration": 7528,
                        "src": "1294:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                          "typeString": "function (bool) pure"
                        }
                      },
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1294:41:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65,
                    "nodeType": "ExpressionStatement",
                    "src": "1294:41:0"
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 69,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "1364:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "1369:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 67,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7559,
                        "src": "1353:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_DAOToken_$75",
                          "typeString": "contract super DAOToken"
                        }
                      },
                      "id": 68,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7244,
                      "src": "1353:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1353:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 53,
                  "id": 72,
                  "nodeType": "Return",
                  "src": "1346:31:0"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\r\n@param _to The address that will receive the minted tokens.\r\n@param _amount The amount of tokens to mint.\r\n@return A boolean that indicates if the operation was successful.\r",
            "id": 74,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 48,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 47,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 6901,
                  "src": "1224:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1224:9:0"
              },
              {
                "arguments": null,
                "id": 50,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 49,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7197,
                  "src": "1234:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1234:7:0"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1187:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1187:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 45,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1200:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1200:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1186:30:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1251:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1251:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1250:6:0"
            },
            "scope": 75,
            "src": "1173:212:0",
            "stateMutability": "nonpayable",
            "superFunction": 7244,
            "visibility": "public"
          }
        ],
        "scope": 76,
        "src": "381:1007:0"
      }
    ],
    "src": "0:1388:0"
  },
  "legacyAST": {
    "absolutePath": "/D/projects/gooddollar/poc4/imports/blockchain/contracts/DAOToken.sol",
    "exportedSymbols": {
      "DAOToken": [
        75
      ]
    },
    "id": 76,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 7265,
        "src": "28:71:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 7095,
        "src": "101:71:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/D/projects/gooddollar/poc4/imports/blockchain/daostack/contracts/token/ERC827/ERC827Token.sol",
        "file": "../daostack/contracts/token/ERC827/ERC827Token.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 76,
        "sourceUnit": 3516,
        "src": "174:60:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5,
              "name": "ERC827Token",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3515,
              "src": "402:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC827Token_$3515",
                "typeString": "contract ERC827Token"
              }
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "402:11:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "MintableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7264,
              "src": "414:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintableToken_$7264",
                "typeString": "contract MintableToken"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "414:13:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 9,
              "name": "BurnableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7094,
              "src": "428:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BurnableToken_$7094",
                "typeString": "contract BurnableToken"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "428:13:0"
          }
        ],
        "contractDependencies": [
          3303,
          3515,
          6927,
          7023,
          7094,
          7137,
          7169,
          7264,
          7510
        ],
        "contractKind": "contract",
        "documentation": "@title DAOToken, base on zeppelin contract.\r\n@dev ERC20 compatible token. It is a mintable, destructible, burnable token.\r",
        "fullyImplemented": true,
        "id": 75,
        "linearizedBaseContracts": [
          75,
          7094,
          7264,
          6927,
          3515,
          7510,
          7023,
          3303,
          7137,
          7169
        ],
        "name": "DAOToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 12,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "451:18:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 11,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "451:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 14,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "476:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 13,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "476:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 17,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "546:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 15,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "546:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 16,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "579:2:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 19,
            "name": "cap",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "588:15:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 18,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "588:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 40,
              "nodeType": "Block",
              "src": "836:79:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 28,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12,
                      "src": "847:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 29,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "854:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "847:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 31,
                  "nodeType": "ExpressionStatement",
                  "src": "847:12:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 32,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "870:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 33,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "879:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "870:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "870:16:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 36,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "897:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 37,
                      "name": "_cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25,
                      "src": "903:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "897:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "897:10:0"
                }
              ]
            },
            "documentation": "@dev Constructor\r\n@param _name - token name\r\n@param _symbol - token symbol\r\n@param _cap - token cap - 0 value means no cap\r",
            "id": 41,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "789:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "803:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "803:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25,
                  "name": "_cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "818:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "818:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "788:40:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "836:0:0"
            },
            "scope": 75,
            "src": "777:138:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 73,
              "nodeType": "Block",
              "src": "1257:128:0",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 54,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "1272:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 55,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1278:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1272:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 66,
                  "nodeType": "IfStatement",
                  "src": "1268:67:0",
                  "trueBody": {
                    "expression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 63,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 60,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45,
                                "src": "1319:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 58,
                                "name": "totalSupply_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 6942,
                                "src": "1302:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 59,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 6870,
                              "src": "1302:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 61,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1302:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 62,
                            "name": "cap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "1331:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1302:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 57,
                        "name": "require",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          7528,
                          7529
                        ],
                        "referencedDeclaration": 7528,
                        "src": "1294:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                          "typeString": "function (bool) pure"
                        }
                      },
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1294:41:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65,
                    "nodeType": "ExpressionStatement",
                    "src": "1294:41:0"
                  }
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 69,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "1364:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "1369:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 67,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7559,
                        "src": "1353:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_DAOToken_$75",
                          "typeString": "contract super DAOToken"
                        }
                      },
                      "id": 68,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7244,
                      "src": "1353:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1353:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 53,
                  "id": 72,
                  "nodeType": "Return",
                  "src": "1346:31:0"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\r\n@param _to The address that will receive the minted tokens.\r\n@param _amount The amount of tokens to mint.\r\n@return A boolean that indicates if the operation was successful.\r",
            "id": 74,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 48,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 47,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 6901,
                  "src": "1224:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1224:9:0"
              },
              {
                "arguments": null,
                "id": 50,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 49,
                  "name": "canMint",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7197,
                  "src": "1234:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1234:7:0"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1187:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1187:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 45,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1200:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1200:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1186:30:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "1251:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1251:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1250:6:0"
            },
            "scope": 75,
            "src": "1173:212:0",
            "stateMutability": "nonpayable",
            "superFunction": 7244,
            "visibility": "public"
          }
        ],
        "scope": 76,
        "src": "381:1007:0"
      }
    ],
    "src": "0:1388:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {
    "42": {
      "events": {},
      "links": {},
      "address": "0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf"
    },
    "6000": {
      "events": {},
      "links": {},
      "address": "0xE060d6C4b4601dA6a5Cd284E064d89756a5175Bb",
      "transactionHash": "0x55acbeee84231a703df918f401dd0bcfa196c37427c1e10ab5d072d5f286da7a"
    }
  },
  "schemaVersion": "3.0.0-beta.2",
  "updatedAt": "2018-12-16T13:21:49.487Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "_owner": "address The address which owns the funds.",
          "_spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.   * Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        }
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Addition to ERC20 token methods. It allows to\r approve the transfer of value and execute a call with the sent data.\r Beware that changing an allowance with this method brings the risk that\r someone may use both the old and the new allowance by unfortunate\r transaction ordering. One possible solution to mitigate this race condition\r is to first reduce the spender's allowance to 0 and set the desired value\r afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
        "params": {
          "_data": "ABI-encoded contract call to call `_spender` address.\r",
          "_spender": "The address that will spend the funds.\r",
          "_value": "The amount of tokens to be spent.\r"
        },
        "return": "true if the call function was executed successfully\r"
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_owner": "The address to query the the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specific amount of tokens.",
        "params": {
          "_value": "The amount of token to be burned."
        }
      },
      "decreaseApproval(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender.   * approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "decreaseApprovalAndCall(address,uint256,bytes)": {
        "details": "Addition to StandardToken methods. Decrease the amount of tokens that\r an owner allowed to a spender and execute a call with the sent data.\r approve should be called when allowed[_spender] == 0. To decrement\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r",
        "params": {
          "_data": "ABI-encoded contract call to call `_spender` address.\r",
          "_spender": "The address which will spend the funds.\r",
          "_subtractedValue": "The amount of tokens to decrease the allowance by.\r"
        }
      },
      "finishMinting()": {
        "details": "Function to stop minting new tokens.",
        "return": "True if the operation was successful."
      },
      "increaseApproval(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender.   * approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.",
          "_spender": "The address which will spend the funds."
        }
      },
      "increaseApprovalAndCall(address,uint256,bytes)": {
        "details": "Addition to StandardToken methods. Increase the amount of tokens that\r an owner allowed to a spender and execute a call with the sent data.\r approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.\r",
          "_data": "ABI-encoded contract call to call `_spender` address.\r",
          "_spender": "The address which will spend the funds.\r"
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens\r",
        "params": {
          "_amount": "The amount of tokens to mint.\r",
          "_to": "The address that will receive the minted tokens.\r"
        },
        "return": "A boolean that indicates if the operation was successful.\r"
      },
      "totalSupply()": {
        "details": "total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "transfer token for a specified address",
        "params": {
          "_to": "The address to transfer to.",
          "_value": "The amount to be transferred."
        }
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Addition to ERC20 token methods. Transfer tokens to a specified\r address and execute a call with the sent data on the same transaction\r",
        "params": {
          "_data": "ABI-encoded contract call to call `_to` address.\r",
          "_to": "address The address which you want to transfer to\r",
          "_value": "uint256 the amout of tokens to be transfered\r"
        },
        "return": "true if the call function was executed successfully\r"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "_from": "address The address which you want to send tokens from",
          "_to": "address The address which you want to transfer to",
          "_value": "uint256 the amount of tokens to be transferred"
        }
      },
      "transferFromAndCall(address,address,uint256,bytes)": {
        "details": "Addition to ERC20 token methods. Transfer tokens from one address to\r another and make a contract call on the same transaction\r",
        "params": {
          "_data": "ABI-encoded contract call to call `_to` address.\r",
          "_from": "The address which you want to send tokens from\r",
          "_to": "The address which you want to transfer to\r",
          "_value": "The amout of tokens to be transferred\r"
        },
        "return": "true if the call function was executed successfully\r"
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "title": "DAOToken, base on zeppelin contract.\r"
  },
  "userdoc": {
    "methods": {}
  }
}